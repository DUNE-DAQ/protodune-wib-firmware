-- tse_rgmii.vhd

-- This file was auto-generated from altera_eth_tse_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.1 185

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tse_rgmii is
	port (
		clk              : in  std_logic                      := '0';             -- control_port_clock_connection.clk
		reset            : in  std_logic                      := '0';             --              reset_connection.reset
		ref_clk          : in  std_logic                      := '0';             --  pcs_ref_clk_clock_connection.clk
		reg_addr         : in  std_logic_vector(4 downto 0)   := (others => '0'); --                  control_port.address
		reg_data_out     : out std_logic_vector(15 downto 0);                     --                              .readdata
		reg_rd           : in  std_logic                      := '0';             --                              .read
		reg_data_in      : in  std_logic_vector(15 downto 0)  := (others => '0'); --                              .writedata
		reg_wr           : in  std_logic                      := '0';             --                              .write
		reg_busy         : out std_logic;                                         --                              .waitrequest
		tx_clk           : out std_logic;                                         -- pcs_transmit_clock_connection.clk
		rx_clk           : out std_logic;                                         --  pcs_receive_clock_connection.clk
		reset_tx_clk     : in  std_logic                      := '0';             -- pcs_transmit_reset_connection.reset
		reset_rx_clk     : in  std_logic                      := '0';             --  pcs_receive_reset_connection.reset
		gmii_rx_dv       : out std_logic;                                         --               gmii_connection.gmii_rx_dv
		gmii_rx_d        : out std_logic_vector(7 downto 0);                      --                              .gmii_rx_d
		gmii_rx_err      : out std_logic;                                         --                              .gmii_rx_err
		gmii_tx_en       : in  std_logic                      := '0';             --                              .gmii_tx_en
		gmii_tx_d        : in  std_logic_vector(7 downto 0)   := (others => '0'); --                              .gmii_tx_d
		gmii_tx_err      : in  std_logic                      := '0';             --                              .gmii_tx_err
		led_crs          : out std_logic;                                         --         status_led_connection.crs
		led_link         : out std_logic;                                         --                              .link
		led_panel_link   : out std_logic;                                         --                              .panel_link
		led_col          : out std_logic;                                         --                              .col
		led_an           : out std_logic;                                         --                              .an
		led_char_err     : out std_logic;                                         --                              .char_err
		led_disp_err     : out std_logic;                                         --                              .disp_err
		rx_recovclkout   : out std_logic;                                         --     serdes_control_connection.rx_recovclkout
		reconfig_togxb   : in  std_logic_vector(139 downto 0) := (others => '0'); --                              .reconfig_togxb
		reconfig_fromgxb : out std_logic_vector(91 downto 0);                     --                              .reconfig_fromgxb
		rxp              : in  std_logic                      := '0';             --             serial_connection.rxp
		txp              : out std_logic                                          --                              .txp
	);
end entity tse_rgmii;

architecture rtl of tse_rgmii is
	component altera_eth_tse_pcs_pma_phyip is
		generic (
			ENABLE_TIMESTAMPING : boolean := false;
			DEV_VERSION         : integer := 0;
			ENABLE_ECC          : boolean := false;
			DEVICE_FAMILY       : string  := "";
			SYNCHRONIZER_DEPTH  : integer := 3;
			ENABLE_CLK_SHARING  : boolean := false;
			ENABLE_SGMII        : boolean := false;
			PHY_IDENTIFIER      : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			reg_addr              : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- address
			reg_data_out          : out std_logic_vector(15 downto 0);                    -- readdata
			reg_rd                : in  std_logic                     := 'X';             -- read
			reg_data_in           : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			reg_wr                : in  std_logic                     := 'X';             -- write
			reg_busy              : out std_logic;                                        -- waitrequest
			ref_clk               : in  std_logic                     := 'X';             -- clk
			rx_pcs_clk            : in  std_logic                     := 'X';             -- export
			sd_loopback           : out std_logic;                                        -- export
			rx_disp_err           : in  std_logic                     := 'X';             -- export
			tx_pcs_clk            : in  std_logic                     := 'X';             -- export
			rx_runningdisp        : in  std_logic                     := 'X';             -- export
			rx_frame              : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			rx_runlengthviolation : in  std_logic                     := 'X';             -- export
			rx_char_err_gx        : in  std_logic                     := 'X';             -- export
			tx_frame              : out std_logic_vector(7 downto 0);                     -- export
			rx_patterndetect      : in  std_logic                     := 'X';             -- export
			rx_kchar              : in  std_logic                     := 'X';             -- export
			rx_syncstatus         : in  std_logic                     := 'X';             -- export
			tx_kchar              : out std_logic;                                        -- export
			rx_rmfifodatadeleted  : in  std_logic                     := 'X';             -- export
			rx_rmfifodatainserted : in  std_logic                     := 'X';             -- export
			gmii_rx_dv            : out std_logic;                                        -- gmii_rx_dv
			gmii_rx_d             : out std_logic_vector(7 downto 0);                     -- gmii_rx_d
			gmii_rx_err           : out std_logic;                                        -- gmii_rx_err
			gmii_tx_en            : in  std_logic                     := 'X';             -- gmii_tx_en
			gmii_tx_d             : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_tx_d
			gmii_tx_err           : in  std_logic                     := 'X';             -- gmii_tx_err
			tx_clk                : out std_logic;                                        -- clk
			rx_clk                : out std_logic;                                        -- clk
			reset_tx_clk          : in  std_logic                     := 'X';             -- reset
			reset_rx_clk          : in  std_logic                     := 'X';             -- reset
			led_crs               : out std_logic;                                        -- export
			led_link              : out std_logic;                                        -- export
			led_panel_link        : out std_logic;                                        -- export
			led_col               : out std_logic;                                        -- export
			led_an                : out std_logic;                                        -- export
			led_char_err          : out std_logic;                                        -- export
			led_disp_err          : out std_logic;                                        -- export
			wa_boundary           : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- export
			tx_clkena             : out std_logic;                                        -- tx_clkena
			rx_clkena             : out std_logic;                                        -- rx_clkena
			mii_rx_dv             : out std_logic;                                        -- mii_rx_dv
			mii_rx_d              : out std_logic_vector(3 downto 0);                     -- mii_rx_d
			mii_rx_err            : out std_logic;                                        -- mii_rx_err
			mii_tx_en             : in  std_logic                     := 'X';             -- mii_tx_en
			mii_tx_d              : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_tx_d
			mii_tx_err            : in  std_logic                     := 'X';             -- mii_tx_err
			mii_col               : out std_logic;                                        -- mii_col
			mii_crs               : out std_logic;                                        -- mii_crs
			set_10                : out std_logic;                                        -- set_10
			set_1000              : out std_logic;                                        -- set_1000
			set_100               : out std_logic;                                        -- set_100
			hd_ena                : out std_logic;                                        -- hd_ena
			pcs_phase_measure_clk : in  std_logic                     := 'X';             -- clk
			rx_latency_adj        : out std_logic_vector(21 downto 0);                    -- data
			tx_latency_adj        : out std_logic_vector(21 downto 0);                    -- data
			tx_ptp_alignment      : out std_logic;                                        -- data
			pcs_eccstatus         : out std_logic_vector(1 downto 0)                      -- pcs_eccstatus
		);
	end component altera_eth_tse_pcs_pma_phyip;

	component altera_xcvr_custom is
		generic (
			device_family                         : string  := "";
			protocol_hint                         : string  := "basic";
			operation_mode                        : string  := "Duplex";
			lanes                                 : integer := 1;
			bonded_group_size                     : integer := 1;
			bonded_mode                           : string  := "xN";
			pma_bonding_mode                      : string  := "x1";
			pcs_pma_width                         : integer := 8;
			ser_base_factor                       : integer := 8;
			ser_words                             : integer := 1;
			data_rate                             : string  := "1250 Mbps";
			base_data_rate                        : string  := "1250 Mbps";
			en_synce_support                      : integer := 0;
			tx_bitslip_enable                     : string  := "false";
			rx_use_coreclk                        : string  := "false";
			tx_use_coreclk                        : string  := "false";
			use_8b10b                             : string  := "false";
			use_8b10b_manual_control              : string  := "false";
			std_tx_pcfifo_mode                    : string  := "low_latency";
			std_rx_pcfifo_mode                    : string  := "low_latency";
			word_aligner_mode                     : string  := "manual";
			word_aligner_state_machine_datacnt    : integer := 1;
			word_aligner_state_machine_errcnt     : integer := 1;
			word_aligner_state_machine_patterncnt : integer := 10;
			word_aligner_pattern_length           : integer := 16;
			word_align_pattern                    : string  := "1111100111111111";
			run_length_violation_checking         : integer := 40;
			use_rate_match_fifo                   : integer := 0;
			rate_match_pattern1                   : string  := "11010000111010000011";
			rate_match_pattern2                   : string  := "00101111000101111100";
			byte_order_mode                       : string  := "none";
			byte_order_pattern                    : string  := "111111011";
			byte_order_pad_pattern                : string  := "000000000";
			coreclk_0ppm_enable                   : string  := "false";
			pll_refclk_cnt                        : integer := 1;
			pll_refclk_freq                       : string  := "62.5 MHz";
			pll_refclk_select                     : string  := "0";
			cdr_refclk_select                     : integer := 0;
			plls                                  : integer := 1;
			pll_type                              : string  := "AUTO";
			pll_select                            : integer := 0;
			pll_reconfig                          : integer := 0;
			pll_external_enable                   : integer := 0;
			gxb_analog_power                      : string  := "AUTO";
			pll_lock_speed                        : string  := "AUTO";
			tx_analog_power                       : string  := "AUTO";
			tx_slew_rate                          : string  := "OFF";
			tx_termination                        : string  := "OCT_100_OHMS";
			tx_use_external_termination           : string  := "false";
			tx_preemp_pretap                      : integer := 0;
			tx_preemp_pretap_inv                  : string  := "false";
			tx_preemp_tap_1                       : integer := 0;
			tx_preemp_tap_2                       : integer := 0;
			tx_preemp_tap_2_inv                   : string  := "false";
			tx_vod_selection                      : integer := 2;
			tx_common_mode                        : string  := "0.65V";
			rx_pll_lock_speed                     : string  := "AUTO";
			rx_common_mode                        : string  := "0.82V";
			rx_termination                        : string  := "OCT_100_OHMS";
			rx_use_external_termination           : string  := "false";
			rx_eq_dc_gain                         : integer := 1;
			rx_eq_ctrl                            : integer := 16;
			mgmt_clk_in_mhz                       : integer := 250;
			embedded_reset                        : integer := 1;
			channel_interface                     : integer := 0
		);
		port (
			phy_mgmt_clk                : in  std_logic                      := 'X';             -- clk
			phy_mgmt_clk_reset          : in  std_logic                      := 'X';             -- reset
			phy_mgmt_address            : in  std_logic_vector(8 downto 0)   := (others => 'X'); -- address
			phy_mgmt_read               : in  std_logic                      := 'X';             -- read
			phy_mgmt_readdata           : out std_logic_vector(31 downto 0);                     -- readdata
			phy_mgmt_waitrequest        : out std_logic;                                         -- waitrequest
			phy_mgmt_write              : in  std_logic                      := 'X';             -- write
			phy_mgmt_writedata          : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			tx_ready                    : out std_logic;                                         -- export
			rx_ready                    : out std_logic;                                         -- export
			pll_ref_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- clk
			tx_serial_data              : out std_logic_vector(0 downto 0);                      -- export
			pll_locked                  : out std_logic_vector(0 downto 0);                      -- export
			rx_serial_data              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_runningdisp              : out std_logic_vector(0 downto 0);                      -- export
			rx_disperr                  : out std_logic_vector(0 downto 0);                      -- export
			rx_errdetect                : out std_logic_vector(0 downto 0);                      -- export
			rx_patterndetect            : out std_logic_vector(0 downto 0);                      -- export
			rx_syncstatus               : out std_logic_vector(0 downto 0);                      -- export
			rx_bitslipboundaryselectout : out std_logic_vector(4 downto 0);                      -- export
			rx_rmfifodatainserted       : out std_logic_vector(0 downto 0);                      -- export
			rx_rmfifodatadeleted        : out std_logic_vector(0 downto 0);                      -- export
			rx_rlv                      : out std_logic_vector(0 downto 0);                      -- export
			rx_recovered_clk            : out std_logic_vector(0 downto 0);                      -- export
			tx_clkout                   : out std_logic_vector(0 downto 0);                      -- export
			rx_clkout                   : out std_logic_vector(0 downto 0);                      -- export
			tx_parallel_data            : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- export
			tx_datak                    : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_parallel_data            : out std_logic_vector(7 downto 0);                      -- export
			rx_datak                    : out std_logic_vector(0 downto 0);                      -- export
			reconfig_from_xcvr          : out std_logic_vector(91 downto 0);                     -- reconfig_from_xcvr
			reconfig_to_xcvr            : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			tx_forceelecidle            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_bitslipboundaryselect    : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- export
			rx_is_lockedtoref           : out std_logic_vector(0 downto 0);                      -- export
			rx_is_lockedtodata          : out std_logic_vector(0 downto 0);                      -- export
			rx_signaldetect             : out std_logic_vector(0 downto 0);                      -- export
			rx_enabyteord               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_bitslip                  : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_byteordflag              : out std_logic_vector(0 downto 0);                      -- export
			tx_coreclkin                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_coreclkin                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			cdr_ref_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_dispval                  : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_forcedisp                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			pll_powerdown               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_digitalreset             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_analogreset              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_cal_busy                 : out std_logic_vector(0 downto 0);                      -- export
			rx_digitalreset             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_analogreset              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_cal_busy                 : out std_logic_vector(0 downto 0);                      -- export
			ext_pll_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X')  -- export
		);
	end component altera_xcvr_custom;

	component altera_eth_tse_phyip_terminator is
		generic (
			RECONFIG_TO_WIDTH   : integer := 140;
			RECONFIG_FROM_WIDTH : integer := 92;
			ENABLE_TIMESTAMPING : boolean := false
		);
		port (
			clk                        : in  std_logic                      := 'X';             -- clk
			reset                      : in  std_logic                      := 'X';             -- reset
			address                    : out std_logic_vector(8 downto 0);                      -- address
			readdata                   : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			read                       : out std_logic;                                         -- read
			writedata                  : out std_logic_vector(31 downto 0);                     -- writedata
			write                      : out std_logic;                                         -- write
			waitrequest                : in  std_logic                      := 'X';             -- waitrequest
			rxp                        : in  std_logic                      := 'X';             -- export
			txp                        : out std_logic;                                         -- export
			rx_recovclkout             : out std_logic;                                         -- export
			reconfig_togxb             : in  std_logic_vector(139 downto 0) := (others => 'X'); -- export
			reconfig_fromgxb           : out std_logic_vector(91 downto 0);                     -- export
			tx_ready                   : in  std_logic                      := 'X';             -- export
			tx_serial_data             : in  std_logic                      := 'X';             -- export
			sd_loopback                : in  std_logic                      := 'X';             -- export
			rx_recovered_clk           : in  std_logic                      := 'X';             -- export
			pll_locked                 : in  std_logic                      := 'X';             -- export
			rx_ready                   : in  std_logic                      := 'X';             -- export
			rx_serial_data             : out std_logic;                                         -- export
			reconfig_to_xcvr           : out std_logic_vector(139 downto 0);                    -- reconfig_to_xcvr
			reconfig_from_xcvr         : in  std_logic_vector(91 downto 0)  := (others => 'X'); -- reconfig_from_xcvr
			cdr_ref_clk_out            : out std_logic;                                         -- export
			cdr_ref_clk_in             : in  std_logic                      := 'X';             -- export
			terminate_rx_recovered_clk : in  std_logic                      := 'X'              -- export
		);
	end component altera_eth_tse_phyip_terminator;

	signal i_tse_pcs_0_sd_loopback_export                         : std_logic;                      -- i_tse_pcs_0:sd_loopback -> i_phyip_terminator_0:sd_loopback
	signal i_custom_phyip_0_rx_clkout_export                      : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_clkout -> i_tse_pcs_0:rx_pcs_clk
	signal i_custom_phyip_0_rx_disperr_export                     : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_disperr -> i_tse_pcs_0:rx_disp_err
	signal i_custom_phyip_0_tx_clkout_export                      : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:tx_clkout -> i_tse_pcs_0:tx_pcs_clk
	signal i_custom_phyip_0_rx_runningdisp_export                 : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_runningdisp -> i_tse_pcs_0:rx_runningdisp
	signal i_custom_phyip_0_rx_parallel_data_export               : std_logic_vector(7 downto 0);   -- i_custom_phyip_0:rx_parallel_data -> i_tse_pcs_0:rx_frame
	signal i_custom_phyip_0_rx_rlv_export                         : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rlv -> i_tse_pcs_0:rx_runlengthviolation
	signal i_custom_phyip_0_rx_errdetect_export                   : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_errdetect -> i_tse_pcs_0:rx_char_err_gx
	signal i_tse_pcs_0_tx_frame_export                            : std_logic_vector(7 downto 0);   -- i_tse_pcs_0:tx_frame -> i_custom_phyip_0:tx_parallel_data
	signal i_custom_phyip_0_rx_patterndetect_export               : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_patterndetect -> i_tse_pcs_0:rx_patterndetect
	signal i_custom_phyip_0_rx_datak_export                       : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_datak -> i_tse_pcs_0:rx_kchar
	signal i_custom_phyip_0_rx_syncstatus_export                  : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_syncstatus -> i_tse_pcs_0:rx_syncstatus
	signal i_custom_phyip_0_rx_bitslipboundaryselectout_export    : std_logic_vector(4 downto 0);   -- i_custom_phyip_0:rx_bitslipboundaryselectout -> i_tse_pcs_0:wa_boundary
	signal i_tse_pcs_0_tx_kchar_export                            : std_logic;                      -- i_tse_pcs_0:tx_kchar -> i_custom_phyip_0:tx_datak
	signal i_custom_phyip_0_rx_rmfifodatainserted_export          : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rmfifodatainserted -> i_tse_pcs_0:rx_rmfifodatainserted
	signal i_custom_phyip_0_rx_rmfifodatadeleted_export           : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rmfifodatadeleted -> i_tse_pcs_0:rx_rmfifodatadeleted
	signal i_custom_phyip_0_tx_ready_export                       : std_logic;                      -- i_custom_phyip_0:tx_ready -> i_phyip_terminator_0:tx_ready
	signal i_custom_phyip_0_tx_serial_data_export                 : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:tx_serial_data -> i_phyip_terminator_0:tx_serial_data
	signal i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr : std_logic_vector(139 downto 0); -- i_phyip_terminator_0:reconfig_to_xcvr -> i_custom_phyip_0:reconfig_to_xcvr
	signal i_custom_phyip_0_pll_locked_export                     : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:pll_locked -> i_phyip_terminator_0:pll_locked
	signal i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr : std_logic_vector(91 downto 0);  -- i_custom_phyip_0:reconfig_from_xcvr -> i_phyip_terminator_0:reconfig_from_xcvr
	signal i_custom_phyip_0_rx_ready_export                       : std_logic;                      -- i_custom_phyip_0:rx_ready -> i_phyip_terminator_0:rx_ready
	signal i_phyip_terminator_0_rx_serial_data_export             : std_logic;                      -- i_phyip_terminator_0:rx_serial_data -> i_custom_phyip_0:rx_serial_data
	signal i_custom_phyip_0_rx_recovered_clk_export               : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_recovered_clk -> i_phyip_terminator_0:rx_recovered_clk
	signal i_phyip_terminator_0_av_dummy_master_readdata          : std_logic_vector(31 downto 0);  -- i_custom_phyip_0:phy_mgmt_readdata -> i_phyip_terminator_0:readdata
	signal i_phyip_terminator_0_av_dummy_master_waitrequest       : std_logic;                      -- i_custom_phyip_0:phy_mgmt_waitrequest -> i_phyip_terminator_0:waitrequest
	signal i_phyip_terminator_0_av_dummy_master_address           : std_logic_vector(8 downto 0);   -- i_phyip_terminator_0:address -> i_custom_phyip_0:phy_mgmt_address
	signal i_phyip_terminator_0_av_dummy_master_read              : std_logic;                      -- i_phyip_terminator_0:read -> i_custom_phyip_0:phy_mgmt_read
	signal i_phyip_terminator_0_av_dummy_master_writedata         : std_logic_vector(31 downto 0);  -- i_phyip_terminator_0:writedata -> i_custom_phyip_0:phy_mgmt_writedata
	signal i_phyip_terminator_0_av_dummy_master_write             : std_logic;                      -- i_phyip_terminator_0:write -> i_custom_phyip_0:phy_mgmt_write

begin

	i_tse_pcs_0 : component altera_eth_tse_pcs_pma_phyip
		generic map (
			ENABLE_TIMESTAMPING => false,
			DEV_VERSION         => 3841,
			ENABLE_ECC          => false,
			DEVICE_FAMILY       => "ARRIAV",
			SYNCHRONIZER_DEPTH  => 3,
			ENABLE_CLK_SHARING  => false,
			ENABLE_SGMII        => false,
			PHY_IDENTIFIER      => 0
		)
		port map (
			clk                   => clk,                                                 -- control_port_clock_connection.clk
			reset                 => reset,                                               --              reset_connection.reset
			reg_addr              => reg_addr,                                            --                  control_port.address
			reg_data_out          => reg_data_out,                                        --                              .readdata
			reg_rd                => reg_rd,                                              --                              .read
			reg_data_in           => reg_data_in,                                         --                              .writedata
			reg_wr                => reg_wr,                                              --                              .write
			reg_busy              => reg_busy,                                            --                              .waitrequest
			ref_clk               => ref_clk,                                             --  pcs_ref_clk_clock_connection.clk
			rx_pcs_clk            => i_custom_phyip_0_rx_clkout_export(0),                --                    rx_pcs_clk.export
			sd_loopback           => i_tse_pcs_0_sd_loopback_export,                      --                   sd_loopback.export
			rx_disp_err           => i_custom_phyip_0_rx_disperr_export(0),               --                   rx_disp_err.export
			tx_pcs_clk            => i_custom_phyip_0_tx_clkout_export(0),                --                    tx_pcs_clk.export
			rx_runningdisp        => i_custom_phyip_0_rx_runningdisp_export(0),           --                rx_runningdisp.export
			rx_frame              => i_custom_phyip_0_rx_parallel_data_export,            --                      rx_frame.export
			rx_runlengthviolation => i_custom_phyip_0_rx_rlv_export(0),                   --         rx_runlengthviolation.export
			rx_char_err_gx        => i_custom_phyip_0_rx_errdetect_export(0),             --                rx_char_err_gx.export
			tx_frame              => i_tse_pcs_0_tx_frame_export,                         --                      tx_frame.export
			rx_patterndetect      => i_custom_phyip_0_rx_patterndetect_export(0),         --              rx_patterndetect.export
			rx_kchar              => i_custom_phyip_0_rx_datak_export(0),                 --                      rx_kchar.export
			rx_syncstatus         => i_custom_phyip_0_rx_syncstatus_export(0),            --                 rx_syncstatus.export
			tx_kchar              => i_tse_pcs_0_tx_kchar_export,                         --                      tx_kchar.export
			rx_rmfifodatadeleted  => i_custom_phyip_0_rx_rmfifodatadeleted_export(0),     --          rx_rmfifodatadeleted.export
			rx_rmfifodatainserted => i_custom_phyip_0_rx_rmfifodatainserted_export(0),    --         rx_rmfifodatainserted.export
			gmii_rx_dv            => gmii_rx_dv,                                          --               gmii_connection.gmii_rx_dv
			gmii_rx_d             => gmii_rx_d,                                           --                              .gmii_rx_d
			gmii_rx_err           => gmii_rx_err,                                         --                              .gmii_rx_err
			gmii_tx_en            => gmii_tx_en,                                          --                              .gmii_tx_en
			gmii_tx_d             => gmii_tx_d,                                           --                              .gmii_tx_d
			gmii_tx_err           => gmii_tx_err,                                         --                              .gmii_tx_err
			tx_clk                => tx_clk,                                              -- pcs_transmit_clock_connection.clk
			rx_clk                => rx_clk,                                              --  pcs_receive_clock_connection.clk
			reset_tx_clk          => reset_tx_clk,                                        -- pcs_transmit_reset_connection.reset
			reset_rx_clk          => reset_rx_clk,                                        --  pcs_receive_reset_connection.reset
			led_crs               => led_crs,                                             --         status_led_connection.export
			led_link              => led_link,                                            --                              .export
			led_panel_link        => led_panel_link,                                      --                              .export
			led_col               => led_col,                                             --                              .export
			led_an                => led_an,                                              --                              .export
			led_char_err          => led_char_err,                                        --                              .export
			led_disp_err          => led_disp_err,                                        --                              .export
			wa_boundary           => i_custom_phyip_0_rx_bitslipboundaryselectout_export, --                   wa_boundary.export
			tx_clkena             => open,                                                --                   (terminated)
			rx_clkena             => open,                                                --                   (terminated)
			mii_rx_dv             => open,                                                --                   (terminated)
			mii_rx_d              => open,                                                --                   (terminated)
			mii_rx_err            => open,                                                --                   (terminated)
			mii_tx_en             => '0',                                                 --                   (terminated)
			mii_tx_d              => "0000",                                              --                   (terminated)
			mii_tx_err            => '0',                                                 --                   (terminated)
			mii_col               => open,                                                --                   (terminated)
			mii_crs               => open,                                                --                   (terminated)
			set_10                => open,                                                --                   (terminated)
			set_1000              => open,                                                --                   (terminated)
			set_100               => open,                                                --                   (terminated)
			hd_ena                => open,                                                --                   (terminated)
			pcs_phase_measure_clk => '0',                                                 --                   (terminated)
			rx_latency_adj        => open,                                                --                   (terminated)
			tx_latency_adj        => open,                                                --                   (terminated)
			tx_ptp_alignment      => open,                                                --                   (terminated)
			pcs_eccstatus         => open                                                 --                   (terminated)
		);

	i_custom_phyip_0 : component altera_xcvr_custom
		generic map (
			device_family                         => "Arria V",
			protocol_hint                         => "gige",
			operation_mode                        => "Duplex",
			lanes                                 => 1,
			bonded_group_size                     => 1,
			bonded_mode                           => "xN",
			pma_bonding_mode                      => "x1",
			pcs_pma_width                         => 10,
			ser_base_factor                       => 8,
			ser_words                             => 1,
			data_rate                             => "1250 Mbps",
			base_data_rate                        => "1250 Mbps",
			en_synce_support                      => 0,
			tx_bitslip_enable                     => "false",
			rx_use_coreclk                        => "false",
			tx_use_coreclk                        => "false",
			use_8b10b                             => "true",
			use_8b10b_manual_control              => "false",
			std_tx_pcfifo_mode                    => "low_latency",
			std_rx_pcfifo_mode                    => "low_latency",
			word_aligner_mode                     => "sync_state_machine",
			word_aligner_state_machine_datacnt    => 3,
			word_aligner_state_machine_errcnt     => 4,
			word_aligner_state_machine_patterncnt => 4,
			word_aligner_pattern_length           => 7,
			word_align_pattern                    => "1111100",
			run_length_violation_checking         => 5,
			use_rate_match_fifo                   => 1,
			rate_match_pattern1                   => "10100010010101111100",
			rate_match_pattern2                   => "10101011011010000011",
			byte_order_mode                       => "none",
			byte_order_pattern                    => "111111011",
			byte_order_pad_pattern                => "000000000",
			coreclk_0ppm_enable                   => "false",
			pll_refclk_cnt                        => 1,
			pll_refclk_freq                       => "125.0 MHz",
			pll_refclk_select                     => "0",
			cdr_refclk_select                     => 0,
			plls                                  => 1,
			pll_type                              => "CMU",
			pll_select                            => 0,
			pll_reconfig                          => 0,
			pll_external_enable                   => 0,
			gxb_analog_power                      => "AUTO",
			pll_lock_speed                        => "AUTO",
			tx_analog_power                       => "AUTO",
			tx_slew_rate                          => "OFF",
			tx_termination                        => "OCT_100_OHMS",
			tx_use_external_termination           => "false",
			tx_preemp_pretap                      => 0,
			tx_preemp_pretap_inv                  => "false",
			tx_preemp_tap_1                       => 0,
			tx_preemp_tap_2                       => 0,
			tx_preemp_tap_2_inv                   => "false",
			tx_vod_selection                      => 2,
			tx_common_mode                        => "0.65V",
			rx_pll_lock_speed                     => "AUTO",
			rx_common_mode                        => "0.82V",
			rx_termination                        => "OCT_100_OHMS",
			rx_use_external_termination           => "false",
			rx_eq_dc_gain                         => 1,
			rx_eq_ctrl                            => 16,
			mgmt_clk_in_mhz                       => 250,
			embedded_reset                        => 1,
			channel_interface                     => 0
		)
		port map (
			phy_mgmt_clk                => clk,                                                    --                phy_mgmt_clk.clk
			phy_mgmt_clk_reset          => reset,                                                  --          phy_mgmt_clk_reset.reset
			phy_mgmt_address            => i_phyip_terminator_0_av_dummy_master_address,           --                    phy_mgmt.address
			phy_mgmt_read               => i_phyip_terminator_0_av_dummy_master_read,              --                            .read
			phy_mgmt_readdata           => i_phyip_terminator_0_av_dummy_master_readdata,          --                            .readdata
			phy_mgmt_waitrequest        => i_phyip_terminator_0_av_dummy_master_waitrequest,       --                            .waitrequest
			phy_mgmt_write              => i_phyip_terminator_0_av_dummy_master_write,             --                            .write
			phy_mgmt_writedata          => i_phyip_terminator_0_av_dummy_master_writedata,         --                            .writedata
			tx_ready                    => i_custom_phyip_0_tx_ready_export,                       --                    tx_ready.export
			rx_ready                    => i_custom_phyip_0_rx_ready_export,                       --                    rx_ready.export
			pll_ref_clk(0)              => ref_clk,                                                --                 pll_ref_clk.clk
			tx_serial_data              => i_custom_phyip_0_tx_serial_data_export,                 --              tx_serial_data.export
			pll_locked                  => i_custom_phyip_0_pll_locked_export,                     --                  pll_locked.export
			rx_serial_data(0)           => i_phyip_terminator_0_rx_serial_data_export,             --              rx_serial_data.export
			rx_runningdisp              => i_custom_phyip_0_rx_runningdisp_export,                 --              rx_runningdisp.export
			rx_disperr                  => i_custom_phyip_0_rx_disperr_export,                     --                  rx_disperr.export
			rx_errdetect                => i_custom_phyip_0_rx_errdetect_export,                   --                rx_errdetect.export
			rx_patterndetect            => i_custom_phyip_0_rx_patterndetect_export,               --            rx_patterndetect.export
			rx_syncstatus               => i_custom_phyip_0_rx_syncstatus_export,                  --               rx_syncstatus.export
			rx_bitslipboundaryselectout => i_custom_phyip_0_rx_bitslipboundaryselectout_export,    -- rx_bitslipboundaryselectout.export
			rx_rmfifodatainserted       => i_custom_phyip_0_rx_rmfifodatainserted_export,          --       rx_rmfifodatainserted.export
			rx_rmfifodatadeleted        => i_custom_phyip_0_rx_rmfifodatadeleted_export,           --        rx_rmfifodatadeleted.export
			rx_rlv                      => i_custom_phyip_0_rx_rlv_export,                         --                      rx_rlv.export
			rx_recovered_clk            => i_custom_phyip_0_rx_recovered_clk_export,               --            rx_recovered_clk.export
			tx_clkout                   => i_custom_phyip_0_tx_clkout_export,                      --                   tx_clkout.export
			rx_clkout                   => i_custom_phyip_0_rx_clkout_export,                      --                   rx_clkout.export
			tx_parallel_data            => i_tse_pcs_0_tx_frame_export,                            --            tx_parallel_data.export
			tx_datak(0)                 => i_tse_pcs_0_tx_kchar_export,                            --                    tx_datak.export
			rx_parallel_data            => i_custom_phyip_0_rx_parallel_data_export,               --            rx_parallel_data.export
			rx_datak                    => i_custom_phyip_0_rx_datak_export,                       --                    rx_datak.export
			reconfig_from_xcvr          => i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr, --          reconfig_from_xcvr.reconfig_from_xcvr
			reconfig_to_xcvr            => i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr, --            reconfig_to_xcvr.reconfig_to_xcvr
			tx_forceelecidle            => "0",                                                    --                 (terminated)
			tx_bitslipboundaryselect    => "00000",                                                --                 (terminated)
			rx_is_lockedtoref           => open,                                                   --                 (terminated)
			rx_is_lockedtodata          => open,                                                   --                 (terminated)
			rx_signaldetect             => open,                                                   --                 (terminated)
			rx_enabyteord               => "0",                                                    --                 (terminated)
			rx_bitslip                  => "0",                                                    --                 (terminated)
			rx_byteordflag              => open,                                                   --                 (terminated)
			tx_coreclkin                => "0",                                                    --                 (terminated)
			rx_coreclkin                => "0",                                                    --                 (terminated)
			cdr_ref_clk                 => "0",                                                    --                 (terminated)
			tx_dispval                  => "0",                                                    --                 (terminated)
			tx_forcedisp                => "0",                                                    --                 (terminated)
			pll_powerdown               => "0",                                                    --                 (terminated)
			tx_digitalreset             => "0",                                                    --                 (terminated)
			tx_analogreset              => "0",                                                    --                 (terminated)
			tx_cal_busy                 => open,                                                   --                 (terminated)
			rx_digitalreset             => "0",                                                    --                 (terminated)
			rx_analogreset              => "0",                                                    --                 (terminated)
			rx_cal_busy                 => open,                                                   --                 (terminated)
			ext_pll_clk                 => "0"                                                     --                 (terminated)
		);

	i_phyip_terminator_0 : component altera_eth_tse_phyip_terminator
		generic map (
			RECONFIG_TO_WIDTH   => 140,
			RECONFIG_FROM_WIDTH => 92,
			ENABLE_TIMESTAMPING => false
		)
		port map (
			clk                        => clk,                                                    --                       clk.clk
			reset                      => reset,                                                  --                     reset.reset
			address                    => i_phyip_terminator_0_av_dummy_master_address,           --           av_dummy_master.address
			readdata                   => i_phyip_terminator_0_av_dummy_master_readdata,          --                          .readdata
			read                       => i_phyip_terminator_0_av_dummy_master_read,              --                          .read
			writedata                  => i_phyip_terminator_0_av_dummy_master_writedata,         --                          .writedata
			write                      => i_phyip_terminator_0_av_dummy_master_write,             --                          .write
			waitrequest                => i_phyip_terminator_0_av_dummy_master_waitrequest,       --                          .waitrequest
			rxp                        => rxp,                                                    --         serial_connection.export
			txp                        => txp,                                                    --                          .export
			rx_recovclkout             => rx_recovclkout,                                         -- serdes_control_connection.export
			reconfig_togxb             => reconfig_togxb,                                         --                          .export
			reconfig_fromgxb           => reconfig_fromgxb,                                       --                          .export
			tx_ready                   => i_custom_phyip_0_tx_ready_export,                       --                  tx_ready.export
			tx_serial_data             => i_custom_phyip_0_tx_serial_data_export(0),              --            tx_serial_data.export
			sd_loopback                => i_tse_pcs_0_sd_loopback_export,                         --               sd_loopback.export
			rx_recovered_clk           => i_custom_phyip_0_rx_recovered_clk_export(0),            --          rx_recovered_clk.export
			pll_locked                 => i_custom_phyip_0_pll_locked_export(0),                  --                pll_locked.export
			rx_ready                   => i_custom_phyip_0_rx_ready_export,                       --                  rx_ready.export
			rx_serial_data             => i_phyip_terminator_0_rx_serial_data_export,             --            rx_serial_data.export
			reconfig_to_xcvr           => i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr, --          reconfig_to_xcvr.reconfig_to_xcvr
			reconfig_from_xcvr         => i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr, --        reconfig_from_xcvr.reconfig_from_xcvr
			cdr_ref_clk_out            => open,                                                   --               (terminated)
			cdr_ref_clk_in             => '0',                                                    --               (terminated)
			terminate_rx_recovered_clk => '0'                                                     --               (terminated)
		);

end architecture rtl; -- of tse_rgmii
