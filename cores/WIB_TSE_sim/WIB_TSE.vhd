-- WIB_TSE.vhd

-- This file was auto-generated from altera_eth_tse_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 16.0 211

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WIB_TSE is
	port (
		clk              : in  std_logic                      := '0';             -- control_port_clock_connection.clk
		reset            : in  std_logic                      := '0';             --              reset_connection.reset
		reg_data_out     : out std_logic_vector(31 downto 0);                     --                  control_port.readdata
		reg_rd           : in  std_logic                      := '0';             --                              .read
		reg_data_in      : in  std_logic_vector(31 downto 0)  := (others => '0'); --                              .writedata
		reg_wr           : in  std_logic                      := '0';             --                              .write
		reg_busy         : out std_logic;                                         --                              .waitrequest
		reg_addr         : in  std_logic_vector(7 downto 0)   := (others => '0'); --                              .address
		ff_rx_clk        : in  std_logic                      := '0';             --      receive_clock_connection.clk
		ff_tx_clk        : in  std_logic                      := '0';             --     transmit_clock_connection.clk
		ff_rx_data       : out std_logic_vector(7 downto 0);                      --                       receive.data
		ff_rx_eop        : out std_logic;                                         --                              .endofpacket
		rx_err           : out std_logic_vector(5 downto 0);                      --                              .error
		ff_rx_rdy        : in  std_logic                      := '0';             --                              .ready
		ff_rx_sop        : out std_logic;                                         --                              .startofpacket
		ff_rx_dval       : out std_logic;                                         --                              .valid
		ff_tx_data       : in  std_logic_vector(7 downto 0)   := (others => '0'); --                      transmit.data
		ff_tx_eop        : in  std_logic                      := '0';             --                              .endofpacket
		ff_tx_err        : in  std_logic                      := '0';             --                              .error
		ff_tx_rdy        : out std_logic;                                         --                              .ready
		ff_tx_sop        : in  std_logic                      := '0';             --                              .startofpacket
		ff_tx_wren       : in  std_logic                      := '0';             --                              .valid
		xon_gen          : in  std_logic                      := '0';             --           mac_misc_connection.xon_gen
		xoff_gen         : in  std_logic                      := '0';             --                              .xoff_gen
		magic_wakeup     : out std_logic;                                         --                              .magic_wakeup
		magic_sleep_n    : in  std_logic                      := '0';             --                              .magic_sleep_n
		ff_tx_crc_fwd    : in  std_logic                      := '0';             --                              .ff_tx_crc_fwd
		ff_tx_septy      : out std_logic;                                         --                              .ff_tx_septy
		tx_ff_uflow      : out std_logic;                                         --                              .tx_ff_uflow
		ff_tx_a_full     : out std_logic;                                         --                              .ff_tx_a_full
		ff_tx_a_empty    : out std_logic;                                         --                              .ff_tx_a_empty
		rx_err_stat      : out std_logic_vector(17 downto 0);                     --                              .rx_err_stat
		rx_frm_type      : out std_logic_vector(3 downto 0);                      --                              .rx_frm_type
		ff_rx_dsav       : out std_logic;                                         --                              .ff_rx_dsav
		ff_rx_a_full     : out std_logic;                                         --                              .ff_rx_a_full
		ff_rx_a_empty    : out std_logic;                                         --                              .ff_rx_a_empty
		ref_clk          : in  std_logic                      := '0';             --  pcs_ref_clk_clock_connection.clk
		led_crs          : out std_logic;                                         --         status_led_connection.crs
		led_link         : out std_logic;                                         --                              .link
		led_panel_link   : out std_logic;                                         --                              .panel_link
		led_col          : out std_logic;                                         --                              .col
		led_an           : out std_logic;                                         --                              .an
		led_char_err     : out std_logic;                                         --                              .char_err
		led_disp_err     : out std_logic;                                         --                              .disp_err
		rx_recovclkout   : out std_logic;                                         --     serdes_control_connection.rx_recovclkout
		reconfig_togxb   : in  std_logic_vector(139 downto 0) := (others => '0'); --                              .reconfig_togxb
		reconfig_fromgxb : out std_logic_vector(91 downto 0);                     --                              .reconfig_fromgxb
		rxp              : in  std_logic                      := '0';             --             serial_connection.rxp
		txp              : out std_logic                                          --                              .txp
	);
end entity WIB_TSE;

architecture rtl of WIB_TSE is
	component altera_eth_tse_mac is
		generic (
			ING_ADDR                 : integer := 0;
			ENABLE_MAC_RX_VLAN       : boolean := false;
			ENABLE_SUP_ADDR          : boolean := false;
			DEVICE_FAMILY            : string  := "ARRIAGX";
			INSERT_TA                : boolean := true;
			ING_FIFO                 : integer := 0;
			ENABLE_ECC               : boolean := false;
			CRC32DWIDTH              : integer := 0;
			ENABLE_ENA               : integer := 32;
			SYNCHRONIZER_DEPTH       : integer := 3;
			ENABLE_MAC_TX_VLAN       : boolean := false;
			RESET_LEVEL              : integer := 0;
			STAT_CNT_ENA             : boolean := false;
			CUST_VERSION             : integer := 0;
			CRC32S1L2_EXTERN         : boolean := false;
			MBIT_ONLY                : boolean := true;
			EG_ADDR                  : integer := 0;
			CORE_VERSION             : integer := 0;
			CRC32GENDELAY            : integer := 0;
			EG_FIFO                  : integer := 0;
			REDUCED_INTERFACE_ENA    : boolean := false;
			ENABLE_MAGIC_DETECT      : boolean := false;
			ENABLE_MDIO              : boolean := false;
			ENABLE_MAC_TXADDR_SET    : boolean := false;
			RAM_TYPE                 : string  := "AUTO";
			CRC32CHECK16BIT          : integer := 0;
			ENABLE_LGTH_CHECK        : boolean := true;
			ENABLE_MAC_FLOW_CTRL     : boolean := false;
			ENABLE_SHIFT16           : boolean := false;
			USE_SYNC_RESET           : boolean := false;
			REDUCED_CONTROL          : boolean := true;
			MDIO_CLK_DIV             : integer := 0;
			ENABLE_PADDING           : boolean := true;
			ENABLE_GMII_LOOPBACK     : boolean := false;
			GBIT_ONLY                : boolean := true;
			ENA_HASH                 : boolean := false;
			ENABLE_EXTENDED_STAT_REG : boolean := false;
			ENABLE_HD_LOGIC          : boolean := false
		);
		port (
			clk             : in  std_logic                     := 'X';             -- clk
			reset           : in  std_logic                     := 'X';             -- reset
			reg_addr        : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			reg_data_out    : out std_logic_vector(31 downto 0);                    -- readdata
			reg_rd          : in  std_logic                     := 'X';             -- read
			reg_data_in     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reg_wr          : in  std_logic                     := 'X';             -- write
			reg_busy        : out std_logic;                                        -- waitrequest
			ff_tx_clk       : in  std_logic                     := 'X';             -- clk
			ff_rx_clk       : in  std_logic                     := 'X';             -- clk
			ff_rx_data      : out std_logic_vector(7 downto 0);                     -- data
			ff_rx_eop       : out std_logic;                                        -- endofpacket
			rx_err          : out std_logic_vector(5 downto 0);                     -- error
			ff_rx_rdy       : in  std_logic                     := 'X';             -- ready
			ff_rx_sop       : out std_logic;                                        -- startofpacket
			ff_rx_dval      : out std_logic;                                        -- valid
			ff_tx_data      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			ff_tx_eop       : in  std_logic                     := 'X';             -- endofpacket
			ff_tx_err       : in  std_logic                     := 'X';             -- error
			ff_tx_rdy       : out std_logic;                                        -- ready
			ff_tx_sop       : in  std_logic                     := 'X';             -- startofpacket
			ff_tx_wren      : in  std_logic                     := 'X';             -- valid
			xon_gen         : in  std_logic                     := 'X';             -- export
			xoff_gen        : in  std_logic                     := 'X';             -- export
			magic_wakeup    : out std_logic;                                        -- export
			magic_sleep_n   : in  std_logic                     := 'X';             -- export
			ff_tx_crc_fwd   : in  std_logic                     := 'X';             -- export
			ff_tx_septy     : out std_logic;                                        -- export
			tx_ff_uflow     : out std_logic;                                        -- export
			ff_tx_a_full    : out std_logic;                                        -- export
			ff_tx_a_empty   : out std_logic;                                        -- export
			rx_err_stat     : out std_logic_vector(17 downto 0);                    -- export
			rx_frm_type     : out std_logic_vector(3 downto 0);                     -- export
			ff_rx_dsav      : out std_logic;                                        -- export
			ff_rx_a_full    : out std_logic;                                        -- export
			ff_rx_a_empty   : out std_logic;                                        -- export
			gm_rx_d         : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_rx_d
			gm_rx_dv        : in  std_logic                     := 'X';             -- gmii_rx_dv
			gm_rx_err       : in  std_logic                     := 'X';             -- gmii_rx_err
			gm_tx_d         : out std_logic_vector(7 downto 0);                     -- gmii_tx_d
			gm_tx_en        : out std_logic;                                        -- gmii_tx_en
			gm_tx_err       : out std_logic;                                        -- gmii_tx_err
			m_rx_d          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_rx_d
			m_rx_en         : in  std_logic                     := 'X';             -- mii_rx_dv
			m_rx_err        : in  std_logic                     := 'X';             -- mii_rx_err
			m_tx_d          : out std_logic_vector(3 downto 0);                     -- mii_tx_d
			m_tx_en         : out std_logic;                                        -- mii_tx_en
			m_tx_err        : out std_logic;                                        -- mii_tx_err
			m_rx_crs        : in  std_logic                     := 'X';             -- mii_crs
			m_rx_col        : in  std_logic                     := 'X';             -- mii_col
			set_10          : in  std_logic                     := 'X';             -- set_10
			set_1000        : in  std_logic                     := 'X';             -- set_1000
			rx_clkena       : in  std_logic                     := 'X';             -- rx_clkena
			tx_clkena       : in  std_logic                     := 'X';             -- tx_clkena
			tx_clk          : in  std_logic                     := 'X';             -- clk
			rx_clk          : in  std_logic                     := 'X';             -- clk
			ff_rx_mod       : out std_logic_vector(1 downto 0);                     -- export
			ff_tx_mod       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			mac_eccstatus   : out std_logic_vector(1 downto 0);                     -- mac_eccstatus
			mdc             : out std_logic;                                        -- mdc
			mdio_in         : in  std_logic                     := 'X';             -- mdio_in
			mdio_out        : out std_logic;                                        -- mdio_out
			mdio_oen        : out std_logic;                                        -- mdio_oen
			rgmii_out1_aclr : out std_logic;                                        -- export
			rgmii_out1_din  : out std_logic_vector(1 downto 0);                     -- export
			rgmii_in1_dout  : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			rgmii_in1_ck    : out std_logic;                                        -- export
			rgmii_out4_din  : out std_logic_vector(7 downto 0);                     -- export
			rgmii_out4_ck   : out std_logic;                                        -- export
			rgmii_in1_pad   : out std_logic;                                        -- export
			rgmii_out4_aclr : out std_logic;                                        -- export
			rgmii_out1_pad  : in  std_logic                     := 'X';             -- export
			rgmii_out1_ck   : out std_logic;                                        -- export
			rgmii_in4_dout  : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			rgmii_in4_pad   : out std_logic_vector(3 downto 0);                     -- export
			rgmii_out4_pad  : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			rgmii_in4_ck    : out std_logic;                                        -- export
			rgmii_in        : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- rgmii_in
			rgmii_out       : out std_logic_vector(3 downto 0);                     -- rgmii_out
			rx_control      : in  std_logic                     := 'X';             -- rx_control
			tx_control      : out std_logic;                                        -- tx_control
			eth_mode        : out std_logic;                                        -- eth_mode
			ena_10          : out std_logic                                         -- ena_10
		);
	end component altera_eth_tse_mac;

	component altera_eth_tse_avalon_arbiter is
		generic (
			MAX_CHANNELS     : integer := 1;
			MAC_ONLY         : boolean := true;
			SLAVE_ADDR_WIDTH : integer := 8
		);
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			reg_data_out       : out std_logic_vector(31 downto 0);                    -- readdata
			reg_rd             : in  std_logic                     := 'X';             -- read
			reg_data_in        : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reg_wr             : in  std_logic                     := 'X';             -- write
			reg_busy           : out std_logic;                                        -- waitrequest
			reg_addr           : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			mac_address_0      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_0     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_0         : out std_logic;                                        -- read
			mac_writedata_0    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_0        : out std_logic;                                        -- write
			mac_waitrequest_0  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_0      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_0     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_0         : out std_logic;                                        -- read
			pcs_writedata_0    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_0        : out std_logic;                                        -- write
			pcs_waitrequest_0  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_1      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_1     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_1         : out std_logic;                                        -- read
			mac_writedata_1    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_1        : out std_logic;                                        -- write
			mac_waitrequest_1  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_1      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_1     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_1         : out std_logic;                                        -- read
			pcs_writedata_1    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_1        : out std_logic;                                        -- write
			pcs_waitrequest_1  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_2      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_2     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_2         : out std_logic;                                        -- read
			mac_writedata_2    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_2        : out std_logic;                                        -- write
			mac_waitrequest_2  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_2      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_2     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_2         : out std_logic;                                        -- read
			pcs_writedata_2    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_2        : out std_logic;                                        -- write
			pcs_waitrequest_2  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_3      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_3     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_3         : out std_logic;                                        -- read
			mac_writedata_3    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_3        : out std_logic;                                        -- write
			mac_waitrequest_3  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_3      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_3     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_3         : out std_logic;                                        -- read
			pcs_writedata_3    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_3        : out std_logic;                                        -- write
			pcs_waitrequest_3  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_4      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_4     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_4         : out std_logic;                                        -- read
			mac_writedata_4    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_4        : out std_logic;                                        -- write
			mac_waitrequest_4  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_4      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_4     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_4         : out std_logic;                                        -- read
			pcs_writedata_4    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_4        : out std_logic;                                        -- write
			pcs_waitrequest_4  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_5      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_5     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_5         : out std_logic;                                        -- read
			mac_writedata_5    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_5        : out std_logic;                                        -- write
			mac_waitrequest_5  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_5      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_5     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_5         : out std_logic;                                        -- read
			pcs_writedata_5    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_5        : out std_logic;                                        -- write
			pcs_waitrequest_5  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_6      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_6     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_6         : out std_logic;                                        -- read
			mac_writedata_6    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_6        : out std_logic;                                        -- write
			mac_waitrequest_6  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_6      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_6     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_6         : out std_logic;                                        -- read
			pcs_writedata_6    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_6        : out std_logic;                                        -- write
			pcs_waitrequest_6  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_7      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_7     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_7         : out std_logic;                                        -- read
			mac_writedata_7    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_7        : out std_logic;                                        -- write
			mac_waitrequest_7  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_7      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_7     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_7         : out std_logic;                                        -- read
			pcs_writedata_7    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_7        : out std_logic;                                        -- write
			pcs_waitrequest_7  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_8      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_8     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_8         : out std_logic;                                        -- read
			mac_writedata_8    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_8        : out std_logic;                                        -- write
			mac_waitrequest_8  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_8      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_8     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_8         : out std_logic;                                        -- read
			pcs_writedata_8    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_8        : out std_logic;                                        -- write
			pcs_waitrequest_8  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_9      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_9     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_9         : out std_logic;                                        -- read
			mac_writedata_9    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_9        : out std_logic;                                        -- write
			mac_waitrequest_9  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_9      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_9     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_9         : out std_logic;                                        -- read
			pcs_writedata_9    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_9        : out std_logic;                                        -- write
			pcs_waitrequest_9  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_10     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_10    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_10        : out std_logic;                                        -- read
			mac_writedata_10   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_10       : out std_logic;                                        -- write
			mac_waitrequest_10 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_10     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_10    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_10        : out std_logic;                                        -- read
			pcs_writedata_10   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_10       : out std_logic;                                        -- write
			pcs_waitrequest_10 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_11     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_11    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_11        : out std_logic;                                        -- read
			mac_writedata_11   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_11       : out std_logic;                                        -- write
			mac_waitrequest_11 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_11     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_11    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_11        : out std_logic;                                        -- read
			pcs_writedata_11   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_11       : out std_logic;                                        -- write
			pcs_waitrequest_11 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_12     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_12    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_12        : out std_logic;                                        -- read
			mac_writedata_12   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_12       : out std_logic;                                        -- write
			mac_waitrequest_12 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_12     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_12    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_12        : out std_logic;                                        -- read
			pcs_writedata_12   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_12       : out std_logic;                                        -- write
			pcs_waitrequest_12 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_13     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_13    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_13        : out std_logic;                                        -- read
			mac_writedata_13   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_13       : out std_logic;                                        -- write
			mac_waitrequest_13 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_13     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_13    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_13        : out std_logic;                                        -- read
			pcs_writedata_13   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_13       : out std_logic;                                        -- write
			pcs_waitrequest_13 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_14     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_14    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_14        : out std_logic;                                        -- read
			mac_writedata_14   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_14       : out std_logic;                                        -- write
			mac_waitrequest_14 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_14     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_14    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_14        : out std_logic;                                        -- read
			pcs_writedata_14   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_14       : out std_logic;                                        -- write
			pcs_waitrequest_14 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_15     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_15    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_15        : out std_logic;                                        -- read
			mac_writedata_15   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_15       : out std_logic;                                        -- write
			mac_waitrequest_15 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_15     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_15    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_15        : out std_logic;                                        -- read
			pcs_writedata_15   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_15       : out std_logic;                                        -- write
			pcs_waitrequest_15 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_16     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_16    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_16        : out std_logic;                                        -- read
			mac_writedata_16   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_16       : out std_logic;                                        -- write
			mac_waitrequest_16 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_16     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_16    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_16        : out std_logic;                                        -- read
			pcs_writedata_16   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_16       : out std_logic;                                        -- write
			pcs_waitrequest_16 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_17     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_17    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_17        : out std_logic;                                        -- read
			mac_writedata_17   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_17       : out std_logic;                                        -- write
			mac_waitrequest_17 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_17     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_17    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_17        : out std_logic;                                        -- read
			pcs_writedata_17   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_17       : out std_logic;                                        -- write
			pcs_waitrequest_17 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_18     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_18    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_18        : out std_logic;                                        -- read
			mac_writedata_18   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_18       : out std_logic;                                        -- write
			mac_waitrequest_18 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_18     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_18    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_18        : out std_logic;                                        -- read
			pcs_writedata_18   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_18       : out std_logic;                                        -- write
			pcs_waitrequest_18 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_19     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_19    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_19        : out std_logic;                                        -- read
			mac_writedata_19   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_19       : out std_logic;                                        -- write
			mac_waitrequest_19 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_19     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_19    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_19        : out std_logic;                                        -- read
			pcs_writedata_19   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_19       : out std_logic;                                        -- write
			pcs_waitrequest_19 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_20     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_20    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_20        : out std_logic;                                        -- read
			mac_writedata_20   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_20       : out std_logic;                                        -- write
			mac_waitrequest_20 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_20     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_20    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_20        : out std_logic;                                        -- read
			pcs_writedata_20   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_20       : out std_logic;                                        -- write
			pcs_waitrequest_20 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_21     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_21    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_21        : out std_logic;                                        -- read
			mac_writedata_21   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_21       : out std_logic;                                        -- write
			mac_waitrequest_21 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_21     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_21    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_21        : out std_logic;                                        -- read
			pcs_writedata_21   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_21       : out std_logic;                                        -- write
			pcs_waitrequest_21 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_22     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_22    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_22        : out std_logic;                                        -- read
			mac_writedata_22   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_22       : out std_logic;                                        -- write
			mac_waitrequest_22 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_22     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_22    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_22        : out std_logic;                                        -- read
			pcs_writedata_22   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_22       : out std_logic;                                        -- write
			pcs_waitrequest_22 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_23     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_23    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_23        : out std_logic;                                        -- read
			mac_writedata_23   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_23       : out std_logic;                                        -- write
			mac_waitrequest_23 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_23     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_23    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_23        : out std_logic;                                        -- read
			pcs_writedata_23   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_23       : out std_logic;                                        -- write
			pcs_waitrequest_23 : in  std_logic                     := 'X'              -- waitrequest
		);
	end component altera_eth_tse_avalon_arbiter;

	component altera_eth_tse_pcs_pma_phyip is
		generic (
			ENABLE_TIMESTAMPING : boolean := false;
			DEV_VERSION         : integer := 0;
			ENABLE_ECC          : boolean := false;
			DEVICE_FAMILY       : string  := "";
			SYNCHRONIZER_DEPTH  : integer := 3;
			ENABLE_CLK_SHARING  : boolean := false;
			ENABLE_SGMII        : boolean := false;
			PHY_IDENTIFIER      : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			reg_addr              : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- address
			reg_data_out          : out std_logic_vector(15 downto 0);                    -- readdata
			reg_rd                : in  std_logic                     := 'X';             -- read
			reg_data_in           : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			reg_wr                : in  std_logic                     := 'X';             -- write
			reg_busy              : out std_logic;                                        -- waitrequest
			ref_clk               : in  std_logic                     := 'X';             -- clk
			rx_pcs_clk            : in  std_logic                     := 'X';             -- export
			sd_loopback           : out std_logic;                                        -- export
			rx_disp_err           : in  std_logic                     := 'X';             -- export
			tx_pcs_clk            : in  std_logic                     := 'X';             -- export
			rx_runningdisp        : in  std_logic                     := 'X';             -- export
			rx_frame              : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			rx_runlengthviolation : in  std_logic                     := 'X';             -- export
			rx_char_err_gx        : in  std_logic                     := 'X';             -- export
			tx_frame              : out std_logic_vector(7 downto 0);                     -- export
			rx_patterndetect      : in  std_logic                     := 'X';             -- export
			rx_kchar              : in  std_logic                     := 'X';             -- export
			rx_syncstatus         : in  std_logic                     := 'X';             -- export
			tx_kchar              : out std_logic;                                        -- export
			rx_rmfifodatadeleted  : in  std_logic                     := 'X';             -- export
			rx_rmfifodatainserted : in  std_logic                     := 'X';             -- export
			tx_clkena             : out std_logic;                                        -- tx_clkena
			rx_clkena             : out std_logic;                                        -- rx_clkena
			gmii_rx_dv            : out std_logic;                                        -- gmii_rx_dv
			gmii_rx_d             : out std_logic_vector(7 downto 0);                     -- gmii_rx_d
			gmii_rx_err           : out std_logic;                                        -- gmii_rx_err
			gmii_tx_en            : in  std_logic                     := 'X';             -- gmii_tx_en
			gmii_tx_d             : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_tx_d
			gmii_tx_err           : in  std_logic                     := 'X';             -- gmii_tx_err
			mii_rx_dv             : out std_logic;                                        -- mii_rx_dv
			mii_rx_d              : out std_logic_vector(3 downto 0);                     -- mii_rx_d
			mii_rx_err            : out std_logic;                                        -- mii_rx_err
			mii_tx_en             : in  std_logic                     := 'X';             -- mii_tx_en
			mii_tx_d              : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_tx_d
			mii_tx_err            : in  std_logic                     := 'X';             -- mii_tx_err
			mii_col               : out std_logic;                                        -- mii_col
			mii_crs               : out std_logic;                                        -- mii_crs
			set_10                : out std_logic;                                        -- set_10
			set_1000              : out std_logic;                                        -- set_1000
			tx_clk                : out std_logic;                                        -- clk
			rx_clk                : out std_logic;                                        -- clk
			reset_tx_clk          : in  std_logic                     := 'X';             -- reset
			reset_rx_clk          : in  std_logic                     := 'X';             -- reset
			led_crs               : out std_logic;                                        -- export
			led_link              : out std_logic;                                        -- export
			led_panel_link        : out std_logic;                                        -- export
			led_col               : out std_logic;                                        -- export
			led_an                : out std_logic;                                        -- export
			led_char_err          : out std_logic;                                        -- export
			led_disp_err          : out std_logic;                                        -- export
			wa_boundary           : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- export
			set_100               : out std_logic;                                        -- set_100
			hd_ena                : out std_logic;                                        -- hd_ena
			pcs_phase_measure_clk : in  std_logic                     := 'X';             -- clk
			rx_latency_adj        : out std_logic_vector(21 downto 0);                    -- data
			tx_latency_adj        : out std_logic_vector(21 downto 0);                    -- data
			tx_ptp_alignment      : out std_logic;                                        -- data
			pcs_eccstatus         : out std_logic_vector(1 downto 0)                      -- pcs_eccstatus
		);
	end component altera_eth_tse_pcs_pma_phyip;

	component altera_xcvr_custom is
		generic (
			device_family                         : string  := "";
			protocol_hint                         : string  := "basic";
			operation_mode                        : string  := "Duplex";
			lanes                                 : integer := 1;
			bonded_group_size                     : integer := 1;
			bonded_mode                           : string  := "xN";
			pma_bonding_mode                      : string  := "x1";
			pcs_pma_width                         : integer := 8;
			ser_base_factor                       : integer := 8;
			ser_words                             : integer := 1;
			data_rate                             : string  := "1250 Mbps";
			base_data_rate                        : string  := "1250 Mbps";
			en_synce_support                      : integer := 0;
			tx_bitslip_enable                     : string  := "false";
			rx_use_coreclk                        : string  := "false";
			tx_use_coreclk                        : string  := "false";
			use_8b10b                             : string  := "false";
			use_8b10b_manual_control              : string  := "false";
			std_tx_pcfifo_mode                    : string  := "low_latency";
			std_rx_pcfifo_mode                    : string  := "low_latency";
			word_aligner_mode                     : string  := "manual";
			word_aligner_state_machine_datacnt    : integer := 1;
			word_aligner_state_machine_errcnt     : integer := 1;
			word_aligner_state_machine_patterncnt : integer := 10;
			word_aligner_pattern_length           : integer := 16;
			word_align_pattern                    : string  := "1111100111111111";
			run_length_violation_checking         : integer := 40;
			use_rate_match_fifo                   : integer := 0;
			rate_match_pattern1                   : string  := "11010000111010000011";
			rate_match_pattern2                   : string  := "00101111000101111100";
			byte_order_mode                       : string  := "none";
			byte_order_pattern                    : string  := "111111011";
			byte_order_pad_pattern                : string  := "000000000";
			coreclk_0ppm_enable                   : string  := "false";
			pll_refclk_cnt                        : integer := 1;
			pll_refclk_freq                       : string  := "62.5 MHz";
			pll_refclk_select                     : string  := "0";
			cdr_refclk_select                     : integer := 0;
			plls                                  : integer := 1;
			pll_type                              : string  := "AUTO";
			pll_select                            : integer := 0;
			pll_reconfig                          : integer := 0;
			pll_external_enable                   : integer := 0;
			gxb_analog_power                      : string  := "AUTO";
			pll_lock_speed                        : string  := "AUTO";
			tx_analog_power                       : string  := "AUTO";
			tx_slew_rate                          : string  := "OFF";
			tx_termination                        : string  := "OCT_100_OHMS";
			tx_use_external_termination           : string  := "false";
			tx_preemp_pretap                      : integer := 0;
			tx_preemp_pretap_inv                  : string  := "false";
			tx_preemp_tap_1                       : integer := 0;
			tx_preemp_tap_2                       : integer := 0;
			tx_preemp_tap_2_inv                   : string  := "false";
			tx_vod_selection                      : integer := 2;
			tx_common_mode                        : string  := "0.65V";
			rx_pll_lock_speed                     : string  := "AUTO";
			rx_common_mode                        : string  := "0.82V";
			rx_termination                        : string  := "OCT_100_OHMS";
			rx_use_external_termination           : string  := "false";
			rx_eq_dc_gain                         : integer := 1;
			rx_eq_ctrl                            : integer := 16;
			mgmt_clk_in_mhz                       : integer := 250;
			embedded_reset                        : integer := 1;
			channel_interface                     : integer := 0
		);
		port (
			phy_mgmt_clk                : in  std_logic                      := 'X';             -- clk
			phy_mgmt_clk_reset          : in  std_logic                      := 'X';             -- reset
			phy_mgmt_address            : in  std_logic_vector(8 downto 0)   := (others => 'X'); -- address
			phy_mgmt_read               : in  std_logic                      := 'X';             -- read
			phy_mgmt_readdata           : out std_logic_vector(31 downto 0);                     -- readdata
			phy_mgmt_waitrequest        : out std_logic;                                         -- waitrequest
			phy_mgmt_write              : in  std_logic                      := 'X';             -- write
			phy_mgmt_writedata          : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			tx_ready                    : out std_logic;                                         -- export
			rx_ready                    : out std_logic;                                         -- export
			pll_ref_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- clk
			tx_serial_data              : out std_logic_vector(0 downto 0);                      -- export
			pll_locked                  : out std_logic_vector(0 downto 0);                      -- export
			rx_serial_data              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_runningdisp              : out std_logic_vector(0 downto 0);                      -- export
			rx_disperr                  : out std_logic_vector(0 downto 0);                      -- export
			rx_errdetect                : out std_logic_vector(0 downto 0);                      -- export
			rx_patterndetect            : out std_logic_vector(0 downto 0);                      -- export
			rx_syncstatus               : out std_logic_vector(0 downto 0);                      -- export
			rx_bitslipboundaryselectout : out std_logic_vector(4 downto 0);                      -- export
			rx_rmfifodatainserted       : out std_logic_vector(0 downto 0);                      -- export
			rx_rmfifodatadeleted        : out std_logic_vector(0 downto 0);                      -- export
			rx_rlv                      : out std_logic_vector(0 downto 0);                      -- export
			rx_recovered_clk            : out std_logic_vector(0 downto 0);                      -- export
			tx_clkout                   : out std_logic_vector(0 downto 0);                      -- export
			rx_clkout                   : out std_logic_vector(0 downto 0);                      -- export
			tx_parallel_data            : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- export
			tx_datak                    : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_parallel_data            : out std_logic_vector(7 downto 0);                      -- export
			rx_datak                    : out std_logic_vector(0 downto 0);                      -- export
			reconfig_from_xcvr          : out std_logic_vector(91 downto 0);                     -- reconfig_from_xcvr
			reconfig_to_xcvr            : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_to_xcvr
			tx_forceelecidle            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_bitslipboundaryselect    : in  std_logic_vector(4 downto 0)   := (others => 'X'); -- export
			rx_is_lockedtoref           : out std_logic_vector(0 downto 0);                      -- export
			rx_is_lockedtodata          : out std_logic_vector(0 downto 0);                      -- export
			rx_signaldetect             : out std_logic_vector(0 downto 0);                      -- export
			rx_enabyteord               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_bitslip                  : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_byteordflag              : out std_logic_vector(0 downto 0);                      -- export
			tx_coreclkin                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_coreclkin                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			cdr_ref_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_dispval                  : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_forcedisp                : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			pll_powerdown               : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_digitalreset             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_analogreset              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			tx_cal_busy                 : out std_logic_vector(0 downto 0);                      -- export
			rx_digitalreset             : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_analogreset              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- export
			rx_cal_busy                 : out std_logic_vector(0 downto 0);                      -- export
			ext_pll_clk                 : in  std_logic_vector(0 downto 0)   := (others => 'X')  -- export
		);
	end component altera_xcvr_custom;

	component altera_eth_tse_phyip_terminator is
		generic (
			RECONFIG_TO_WIDTH   : integer := 140;
			RECONFIG_FROM_WIDTH : integer := 92;
			ENABLE_TIMESTAMPING : boolean := false
		);
		port (
			clk                        : in  std_logic                      := 'X';             -- clk
			reset                      : in  std_logic                      := 'X';             -- reset
			address                    : out std_logic_vector(8 downto 0);                      -- address
			readdata                   : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			read                       : out std_logic;                                         -- read
			writedata                  : out std_logic_vector(31 downto 0);                     -- writedata
			write                      : out std_logic;                                         -- write
			waitrequest                : in  std_logic                      := 'X';             -- waitrequest
			rxp                        : in  std_logic                      := 'X';             -- export
			txp                        : out std_logic;                                         -- export
			rx_recovclkout             : out std_logic;                                         -- export
			reconfig_togxb             : in  std_logic_vector(139 downto 0) := (others => 'X'); -- export
			reconfig_fromgxb           : out std_logic_vector(91 downto 0);                     -- export
			tx_ready                   : in  std_logic                      := 'X';             -- export
			tx_serial_data             : in  std_logic                      := 'X';             -- export
			sd_loopback                : in  std_logic                      := 'X';             -- export
			rx_recovered_clk           : in  std_logic                      := 'X';             -- export
			pll_locked                 : in  std_logic                      := 'X';             -- export
			rx_ready                   : in  std_logic                      := 'X';             -- export
			rx_serial_data             : out std_logic;                                         -- export
			reconfig_to_xcvr           : out std_logic_vector(139 downto 0);                    -- reconfig_to_xcvr
			reconfig_from_xcvr         : in  std_logic_vector(91 downto 0)  := (others => 'X'); -- reconfig_from_xcvr
			cdr_ref_clk_out            : out std_logic;                                         -- export
			cdr_ref_clk_in             : in  std_logic                      := 'X';             -- export
			terminate_rx_recovered_clk : in  std_logic                      := 'X'              -- export
		);
	end component altera_eth_tse_phyip_terminator;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal avalon_arbiter_av_mac_master_0_readdata                : std_logic_vector(31 downto 0);  -- i_tse_mac:reg_data_out -> avalon_arbiter:mac_readdata_0
	signal avalon_arbiter_av_mac_master_0_waitrequest             : std_logic;                      -- i_tse_mac:reg_busy -> avalon_arbiter:mac_waitrequest_0
	signal avalon_arbiter_av_mac_master_0_address                 : std_logic_vector(7 downto 0);   -- avalon_arbiter:mac_address_0 -> i_tse_mac:reg_addr
	signal avalon_arbiter_av_mac_master_0_read                    : std_logic;                      -- avalon_arbiter:mac_read_0 -> i_tse_mac:reg_rd
	signal avalon_arbiter_av_mac_master_0_writedata               : std_logic_vector(31 downto 0);  -- avalon_arbiter:mac_writedata_0 -> i_tse_mac:reg_data_in
	signal avalon_arbiter_av_mac_master_0_write                   : std_logic;                      -- avalon_arbiter:mac_write_0 -> i_tse_mac:reg_wr
	signal i_tse_pcs_0_sd_loopback_export                         : std_logic;                      -- i_tse_pcs_0:sd_loopback -> i_phyip_terminator_0:sd_loopback
	signal i_custom_phyip_0_rx_clkout_export                      : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_clkout -> i_tse_pcs_0:rx_pcs_clk
	signal i_custom_phyip_0_rx_disperr_export                     : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_disperr -> i_tse_pcs_0:rx_disp_err
	signal i_custom_phyip_0_tx_clkout_export                      : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:tx_clkout -> i_tse_pcs_0:tx_pcs_clk
	signal i_custom_phyip_0_rx_runningdisp_export                 : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_runningdisp -> i_tse_pcs_0:rx_runningdisp
	signal i_custom_phyip_0_rx_parallel_data_export               : std_logic_vector(7 downto 0);   -- i_custom_phyip_0:rx_parallel_data -> i_tse_pcs_0:rx_frame
	signal i_custom_phyip_0_rx_rlv_export                         : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rlv -> i_tse_pcs_0:rx_runlengthviolation
	signal i_custom_phyip_0_rx_errdetect_export                   : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_errdetect -> i_tse_pcs_0:rx_char_err_gx
	signal i_tse_pcs_0_tx_frame_export                            : std_logic_vector(7 downto 0);   -- i_tse_pcs_0:tx_frame -> i_custom_phyip_0:tx_parallel_data
	signal i_custom_phyip_0_rx_patterndetect_export               : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_patterndetect -> i_tse_pcs_0:rx_patterndetect
	signal i_custom_phyip_0_rx_datak_export                       : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_datak -> i_tse_pcs_0:rx_kchar
	signal i_custom_phyip_0_rx_syncstatus_export                  : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_syncstatus -> i_tse_pcs_0:rx_syncstatus
	signal i_custom_phyip_0_rx_bitslipboundaryselectout_export    : std_logic_vector(4 downto 0);   -- i_custom_phyip_0:rx_bitslipboundaryselectout -> i_tse_pcs_0:wa_boundary
	signal i_tse_pcs_0_tx_kchar_export                            : std_logic;                      -- i_tse_pcs_0:tx_kchar -> i_custom_phyip_0:tx_datak
	signal i_custom_phyip_0_rx_rmfifodatainserted_export          : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rmfifodatainserted -> i_tse_pcs_0:rx_rmfifodatainserted
	signal i_custom_phyip_0_rx_rmfifodatadeleted_export           : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_rmfifodatadeleted -> i_tse_pcs_0:rx_rmfifodatadeleted
	signal i_custom_phyip_0_tx_ready_export                       : std_logic;                      -- i_custom_phyip_0:tx_ready -> i_phyip_terminator_0:tx_ready
	signal i_custom_phyip_0_tx_serial_data_export                 : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:tx_serial_data -> i_phyip_terminator_0:tx_serial_data
	signal i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr : std_logic_vector(139 downto 0); -- i_phyip_terminator_0:reconfig_to_xcvr -> i_custom_phyip_0:reconfig_to_xcvr
	signal i_custom_phyip_0_pll_locked_export                     : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:pll_locked -> i_phyip_terminator_0:pll_locked
	signal i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr : std_logic_vector(91 downto 0);  -- i_custom_phyip_0:reconfig_from_xcvr -> i_phyip_terminator_0:reconfig_from_xcvr
	signal i_custom_phyip_0_rx_ready_export                       : std_logic;                      -- i_custom_phyip_0:rx_ready -> i_phyip_terminator_0:rx_ready
	signal i_phyip_terminator_0_rx_serial_data_export             : std_logic;                      -- i_phyip_terminator_0:rx_serial_data -> i_custom_phyip_0:rx_serial_data
	signal i_custom_phyip_0_rx_recovered_clk_export               : std_logic_vector(0 downto 0);   -- i_custom_phyip_0:rx_recovered_clk -> i_phyip_terminator_0:rx_recovered_clk
	signal i_phyip_terminator_0_av_dummy_master_readdata          : std_logic_vector(31 downto 0);  -- i_custom_phyip_0:phy_mgmt_readdata -> i_phyip_terminator_0:readdata
	signal i_phyip_terminator_0_av_dummy_master_waitrequest       : std_logic;                      -- i_custom_phyip_0:phy_mgmt_waitrequest -> i_phyip_terminator_0:waitrequest
	signal i_phyip_terminator_0_av_dummy_master_address           : std_logic_vector(8 downto 0);   -- i_phyip_terminator_0:address -> i_custom_phyip_0:phy_mgmt_address
	signal i_phyip_terminator_0_av_dummy_master_read              : std_logic;                      -- i_phyip_terminator_0:read -> i_custom_phyip_0:phy_mgmt_read
	signal i_phyip_terminator_0_av_dummy_master_writedata         : std_logic_vector(31 downto 0);  -- i_phyip_terminator_0:writedata -> i_custom_phyip_0:phy_mgmt_writedata
	signal i_phyip_terminator_0_av_dummy_master_write             : std_logic;                      -- i_phyip_terminator_0:write -> i_custom_phyip_0:phy_mgmt_write
	signal avalon_arbiter_av_pcs_master_0_readdata                : std_logic_vector(15 downto 0);  -- i_tse_pcs_0:reg_data_out -> avalon_arbiter:pcs_readdata_0
	signal avalon_arbiter_av_pcs_master_0_waitrequest             : std_logic;                      -- i_tse_pcs_0:reg_busy -> avalon_arbiter:pcs_waitrequest_0
	signal avalon_arbiter_av_pcs_master_0_address                 : std_logic_vector(4 downto 0);   -- avalon_arbiter:pcs_address_0 -> i_tse_pcs_0:reg_addr
	signal avalon_arbiter_av_pcs_master_0_read                    : std_logic;                      -- avalon_arbiter:pcs_read_0 -> i_tse_pcs_0:reg_rd
	signal avalon_arbiter_av_pcs_master_0_writedata               : std_logic_vector(15 downto 0);  -- avalon_arbiter:pcs_writedata_0 -> i_tse_pcs_0:reg_data_in
	signal avalon_arbiter_av_pcs_master_0_write                   : std_logic;                      -- avalon_arbiter:pcs_write_0 -> i_tse_pcs_0:reg_wr
	signal i_tse_pcs_0_pcs_transmit_clock_connection_clk          : std_logic;                      -- i_tse_pcs_0:tx_clk -> [i_tse_mac:tx_clk, rst_controller:clk]
	signal i_tse_pcs_0_pcs_receive_clock_connection_clk           : std_logic;                      -- i_tse_pcs_0:rx_clk -> [i_tse_mac:rx_clk, rst_controller_001:clk]
	signal i_tse_pcs_0_gmii_connection_gmii_rx_d                  : std_logic_vector(7 downto 0);   -- i_tse_pcs_0:gmii_rx_d -> i_tse_mac:gm_rx_d
	signal i_tse_pcs_0_gmii_connection_gmii_rx_err                : std_logic;                      -- i_tse_pcs_0:gmii_rx_err -> i_tse_mac:gm_rx_err
	signal i_tse_pcs_0_gmii_connection_gmii_rx_dv                 : std_logic;                      -- i_tse_pcs_0:gmii_rx_dv -> i_tse_mac:gm_rx_dv
	signal i_tse_mac_mac_gmii_connection_gmii_tx_d                : std_logic_vector(7 downto 0);   -- i_tse_mac:gm_tx_d -> i_tse_pcs_0:gmii_tx_d
	signal i_tse_mac_mac_gmii_connection_gmii_tx_en               : std_logic;                      -- i_tse_mac:gm_tx_en -> i_tse_pcs_0:gmii_tx_en
	signal i_tse_mac_mac_gmii_connection_gmii_tx_err              : std_logic;                      -- i_tse_mac:gm_tx_err -> i_tse_pcs_0:gmii_tx_err
	signal i_tse_mac_mac_mii_connection_mii_tx_en                 : std_logic;                      -- i_tse_mac:m_tx_en -> i_tse_pcs_0:mii_tx_en
	signal i_tse_pcs_0_mii_connection_mii_rx_d                    : std_logic_vector(3 downto 0);   -- i_tse_pcs_0:mii_rx_d -> i_tse_mac:m_rx_d
	signal i_tse_pcs_0_mii_connection_mii_col                     : std_logic;                      -- i_tse_pcs_0:mii_col -> i_tse_mac:m_rx_col
	signal i_tse_mac_mac_mii_connection_mii_tx_d                  : std_logic_vector(3 downto 0);   -- i_tse_mac:m_tx_d -> i_tse_pcs_0:mii_tx_d
	signal i_tse_mac_mac_mii_connection_mii_tx_err                : std_logic;                      -- i_tse_mac:m_tx_err -> i_tse_pcs_0:mii_tx_err
	signal i_tse_pcs_0_mii_connection_mii_crs                     : std_logic;                      -- i_tse_pcs_0:mii_crs -> i_tse_mac:m_rx_crs
	signal i_tse_pcs_0_mii_connection_mii_rx_err                  : std_logic;                      -- i_tse_pcs_0:mii_rx_err -> i_tse_mac:m_rx_err
	signal i_tse_pcs_0_mii_connection_mii_rx_dv                   : std_logic;                      -- i_tse_pcs_0:mii_rx_dv -> i_tse_mac:m_rx_en
	signal i_tse_pcs_0_sgmii_status_connection_set_1000           : std_logic;                      -- i_tse_pcs_0:set_1000 -> i_tse_mac:set_1000
	signal i_tse_pcs_0_sgmii_status_connection_set_10             : std_logic;                      -- i_tse_pcs_0:set_10 -> i_tse_mac:set_10
	signal i_tse_pcs_0_clock_enable_connection_tx_clkena          : std_logic;                      -- i_tse_pcs_0:tx_clkena -> i_tse_mac:tx_clkena
	signal i_tse_pcs_0_clock_enable_connection_rx_clkena          : std_logic;                      -- i_tse_pcs_0:rx_clkena -> i_tse_mac:rx_clkena
	signal rst_controller_reset_out_reset                         : std_logic;                      -- rst_controller:reset_out -> i_tse_pcs_0:reset_tx_clk
	signal rst_controller_001_reset_out_reset                     : std_logic;                      -- rst_controller_001:reset_out -> i_tse_pcs_0:reset_rx_clk

begin

	i_tse_mac : component altera_eth_tse_mac
		generic map (
			ING_ADDR                 => 13,
			ENABLE_MAC_RX_VLAN       => true,
			ENABLE_SUP_ADDR          => false,
			DEVICE_FAMILY            => "ARRIAV",
			INSERT_TA                => false,
			ING_FIFO                 => 8192,
			ENABLE_ECC               => false,
			CRC32DWIDTH              => 8,
			ENABLE_ENA               => 8,
			SYNCHRONIZER_DEPTH       => 3,
			ENABLE_MAC_TX_VLAN       => true,
			RESET_LEVEL              => 1,
			STAT_CNT_ENA             => true,
			CUST_VERSION             => 0,
			CRC32S1L2_EXTERN         => false,
			MBIT_ONLY                => true,
			EG_ADDR                  => 14,
			CORE_VERSION             => 4096,
			CRC32GENDELAY            => 6,
			EG_FIFO                  => 16384,
			REDUCED_INTERFACE_ENA    => false,
			ENABLE_MAGIC_DETECT      => true,
			ENABLE_MDIO              => false,
			ENABLE_MAC_TXADDR_SET    => true,
			RAM_TYPE                 => "AUTO",
			CRC32CHECK16BIT          => 0,
			ENABLE_LGTH_CHECK        => true,
			ENABLE_MAC_FLOW_CTRL     => true,
			ENABLE_SHIFT16           => false,
			USE_SYNC_RESET           => true,
			REDUCED_CONTROL          => false,
			MDIO_CLK_DIV             => 40,
			ENABLE_PADDING           => true,
			ENABLE_GMII_LOOPBACK     => false,
			GBIT_ONLY                => true,
			ENA_HASH                 => false,
			ENABLE_EXTENDED_STAT_REG => true,
			ENABLE_HD_LOGIC          => false
		)
		port map (
			clk             => clk,                                           -- control_port_clock_connection.clk
			reset           => reset,                                         --              reset_connection.reset
			reg_addr        => avalon_arbiter_av_mac_master_0_address,        --                  control_port.address
			reg_data_out    => avalon_arbiter_av_mac_master_0_readdata,       --                              .readdata
			reg_rd          => avalon_arbiter_av_mac_master_0_read,           --                              .read
			reg_data_in     => avalon_arbiter_av_mac_master_0_writedata,      --                              .writedata
			reg_wr          => avalon_arbiter_av_mac_master_0_write,          --                              .write
			reg_busy        => avalon_arbiter_av_mac_master_0_waitrequest,    --                              .waitrequest
			ff_tx_clk       => ff_tx_clk,                                     --     transmit_clock_connection.clk
			ff_rx_clk       => ff_rx_clk,                                     --      receive_clock_connection.clk
			ff_rx_data      => ff_rx_data,                                    --                       receive.data
			ff_rx_eop       => ff_rx_eop,                                     --                              .endofpacket
			rx_err          => rx_err,                                        --                              .error
			ff_rx_rdy       => ff_rx_rdy,                                     --                              .ready
			ff_rx_sop       => ff_rx_sop,                                     --                              .startofpacket
			ff_rx_dval      => ff_rx_dval,                                    --                              .valid
			ff_tx_data      => ff_tx_data,                                    --                      transmit.data
			ff_tx_eop       => ff_tx_eop,                                     --                              .endofpacket
			ff_tx_err       => ff_tx_err,                                     --                              .error
			ff_tx_rdy       => ff_tx_rdy,                                     --                              .ready
			ff_tx_sop       => ff_tx_sop,                                     --                              .startofpacket
			ff_tx_wren      => ff_tx_wren,                                    --                              .valid
			xon_gen         => xon_gen,                                       --           mac_misc_connection.export
			xoff_gen        => xoff_gen,                                      --                              .export
			magic_wakeup    => magic_wakeup,                                  --                              .export
			magic_sleep_n   => magic_sleep_n,                                 --                              .export
			ff_tx_crc_fwd   => ff_tx_crc_fwd,                                 --                              .export
			ff_tx_septy     => ff_tx_septy,                                   --                              .export
			tx_ff_uflow     => tx_ff_uflow,                                   --                              .export
			ff_tx_a_full    => ff_tx_a_full,                                  --                              .export
			ff_tx_a_empty   => ff_tx_a_empty,                                 --                              .export
			rx_err_stat     => rx_err_stat,                                   --                              .export
			rx_frm_type     => rx_frm_type,                                   --                              .export
			ff_rx_dsav      => ff_rx_dsav,                                    --                              .export
			ff_rx_a_full    => ff_rx_a_full,                                  --                              .export
			ff_rx_a_empty   => ff_rx_a_empty,                                 --                              .export
			gm_rx_d         => i_tse_pcs_0_gmii_connection_gmii_rx_d,         --           mac_gmii_connection.gmii_rx_d
			gm_rx_dv        => i_tse_pcs_0_gmii_connection_gmii_rx_dv,        --                              .gmii_rx_dv
			gm_rx_err       => i_tse_pcs_0_gmii_connection_gmii_rx_err,       --                              .gmii_rx_err
			gm_tx_d         => i_tse_mac_mac_gmii_connection_gmii_tx_d,       --                              .gmii_tx_d
			gm_tx_en        => i_tse_mac_mac_gmii_connection_gmii_tx_en,      --                              .gmii_tx_en
			gm_tx_err       => i_tse_mac_mac_gmii_connection_gmii_tx_err,     --                              .gmii_tx_err
			m_rx_d          => i_tse_pcs_0_mii_connection_mii_rx_d,           --            mac_mii_connection.mii_rx_d
			m_rx_en         => i_tse_pcs_0_mii_connection_mii_rx_dv,          --                              .mii_rx_dv
			m_rx_err        => i_tse_pcs_0_mii_connection_mii_rx_err,         --                              .mii_rx_err
			m_tx_d          => i_tse_mac_mac_mii_connection_mii_tx_d,         --                              .mii_tx_d
			m_tx_en         => i_tse_mac_mac_mii_connection_mii_tx_en,        --                              .mii_tx_en
			m_tx_err        => i_tse_mac_mac_mii_connection_mii_tx_err,       --                              .mii_tx_err
			m_rx_crs        => i_tse_pcs_0_mii_connection_mii_crs,            --                              .mii_crs
			m_rx_col        => i_tse_pcs_0_mii_connection_mii_col,            --                              .mii_col
			set_10          => i_tse_pcs_0_sgmii_status_connection_set_10,    --         mac_status_connection.set_10
			set_1000        => i_tse_pcs_0_sgmii_status_connection_set_1000,  --                              .set_1000
			rx_clkena       => i_tse_pcs_0_clock_enable_connection_rx_clkena, --         mac_clkena_connection.rx_clkena
			tx_clkena       => i_tse_pcs_0_clock_enable_connection_tx_clkena, --                              .tx_clkena
			tx_clk          => i_tse_pcs_0_pcs_transmit_clock_connection_clk, --   pcs_mac_tx_clock_connection.clk
			rx_clk          => i_tse_pcs_0_pcs_receive_clock_connection_clk,  --   pcs_mac_rx_clock_connection.clk
			ff_rx_mod       => open,                                          --                   (terminated)
			ff_tx_mod       => "00",                                          --                   (terminated)
			mac_eccstatus   => open,                                          --                   (terminated)
			mdc             => open,                                          --                   (terminated)
			mdio_in         => '0',                                           --                   (terminated)
			mdio_out        => open,                                          --                   (terminated)
			mdio_oen        => open,                                          --                   (terminated)
			rgmii_out1_aclr => open,                                          --                   (terminated)
			rgmii_out1_din  => open,                                          --                   (terminated)
			rgmii_in1_dout  => "00",                                          --                   (terminated)
			rgmii_in1_ck    => open,                                          --                   (terminated)
			rgmii_out4_din  => open,                                          --                   (terminated)
			rgmii_out4_ck   => open,                                          --                   (terminated)
			rgmii_in1_pad   => open,                                          --                   (terminated)
			rgmii_out4_aclr => open,                                          --                   (terminated)
			rgmii_out1_pad  => '0',                                           --                   (terminated)
			rgmii_out1_ck   => open,                                          --                   (terminated)
			rgmii_in4_dout  => "00000000",                                    --                   (terminated)
			rgmii_in4_pad   => open,                                          --                   (terminated)
			rgmii_out4_pad  => "0000",                                        --                   (terminated)
			rgmii_in4_ck    => open,                                          --                   (terminated)
			rgmii_in        => "0000",                                        --                   (terminated)
			rgmii_out       => open,                                          --                   (terminated)
			rx_control      => '0',                                           --                   (terminated)
			tx_control      => open,                                          --                   (terminated)
			eth_mode        => open,                                          --                   (terminated)
			ena_10          => open                                           --                   (terminated)
		);

	avalon_arbiter : component altera_eth_tse_avalon_arbiter
		generic map (
			MAX_CHANNELS     => 1,
			MAC_ONLY         => false,
			SLAVE_ADDR_WIDTH => 8
		)
		port map (
			clk                => clk,                                        --             clk.clk
			reset              => reset,                                      --           reset.reset
			reg_data_out       => reg_data_out,                               --        av_slave.readdata
			reg_rd             => reg_rd,                                     --                .read
			reg_data_in        => reg_data_in,                                --                .writedata
			reg_wr             => reg_wr,                                     --                .write
			reg_busy           => reg_busy,                                   --                .waitrequest
			reg_addr           => reg_addr,                                   --                .address
			mac_address_0      => avalon_arbiter_av_mac_master_0_address,     -- av_mac_master_0.address
			mac_readdata_0     => avalon_arbiter_av_mac_master_0_readdata,    --                .readdata
			mac_read_0         => avalon_arbiter_av_mac_master_0_read,        --                .read
			mac_writedata_0    => avalon_arbiter_av_mac_master_0_writedata,   --                .writedata
			mac_write_0        => avalon_arbiter_av_mac_master_0_write,       --                .write
			mac_waitrequest_0  => avalon_arbiter_av_mac_master_0_waitrequest, --                .waitrequest
			pcs_address_0      => avalon_arbiter_av_pcs_master_0_address,     -- av_pcs_master_0.address
			pcs_readdata_0     => avalon_arbiter_av_pcs_master_0_readdata,    --                .readdata
			pcs_read_0         => avalon_arbiter_av_pcs_master_0_read,        --                .read
			pcs_writedata_0    => avalon_arbiter_av_pcs_master_0_writedata,   --                .writedata
			pcs_write_0        => avalon_arbiter_av_pcs_master_0_write,       --                .write
			pcs_waitrequest_0  => avalon_arbiter_av_pcs_master_0_waitrequest, --                .waitrequest
			mac_address_1      => open,                                       --     (terminated)
			mac_readdata_1     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_1         => open,                                       --     (terminated)
			mac_writedata_1    => open,                                       --     (terminated)
			mac_write_1        => open,                                       --     (terminated)
			mac_waitrequest_1  => '0',                                        --     (terminated)
			pcs_address_1      => open,                                       --     (terminated)
			pcs_readdata_1     => "0000000000000000",                         --     (terminated)
			pcs_read_1         => open,                                       --     (terminated)
			pcs_writedata_1    => open,                                       --     (terminated)
			pcs_write_1        => open,                                       --     (terminated)
			pcs_waitrequest_1  => '0',                                        --     (terminated)
			mac_address_2      => open,                                       --     (terminated)
			mac_readdata_2     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_2         => open,                                       --     (terminated)
			mac_writedata_2    => open,                                       --     (terminated)
			mac_write_2        => open,                                       --     (terminated)
			mac_waitrequest_2  => '0',                                        --     (terminated)
			pcs_address_2      => open,                                       --     (terminated)
			pcs_readdata_2     => "0000000000000000",                         --     (terminated)
			pcs_read_2         => open,                                       --     (terminated)
			pcs_writedata_2    => open,                                       --     (terminated)
			pcs_write_2        => open,                                       --     (terminated)
			pcs_waitrequest_2  => '0',                                        --     (terminated)
			mac_address_3      => open,                                       --     (terminated)
			mac_readdata_3     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_3         => open,                                       --     (terminated)
			mac_writedata_3    => open,                                       --     (terminated)
			mac_write_3        => open,                                       --     (terminated)
			mac_waitrequest_3  => '0',                                        --     (terminated)
			pcs_address_3      => open,                                       --     (terminated)
			pcs_readdata_3     => "0000000000000000",                         --     (terminated)
			pcs_read_3         => open,                                       --     (terminated)
			pcs_writedata_3    => open,                                       --     (terminated)
			pcs_write_3        => open,                                       --     (terminated)
			pcs_waitrequest_3  => '0',                                        --     (terminated)
			mac_address_4      => open,                                       --     (terminated)
			mac_readdata_4     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_4         => open,                                       --     (terminated)
			mac_writedata_4    => open,                                       --     (terminated)
			mac_write_4        => open,                                       --     (terminated)
			mac_waitrequest_4  => '0',                                        --     (terminated)
			pcs_address_4      => open,                                       --     (terminated)
			pcs_readdata_4     => "0000000000000000",                         --     (terminated)
			pcs_read_4         => open,                                       --     (terminated)
			pcs_writedata_4    => open,                                       --     (terminated)
			pcs_write_4        => open,                                       --     (terminated)
			pcs_waitrequest_4  => '0',                                        --     (terminated)
			mac_address_5      => open,                                       --     (terminated)
			mac_readdata_5     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_5         => open,                                       --     (terminated)
			mac_writedata_5    => open,                                       --     (terminated)
			mac_write_5        => open,                                       --     (terminated)
			mac_waitrequest_5  => '0',                                        --     (terminated)
			pcs_address_5      => open,                                       --     (terminated)
			pcs_readdata_5     => "0000000000000000",                         --     (terminated)
			pcs_read_5         => open,                                       --     (terminated)
			pcs_writedata_5    => open,                                       --     (terminated)
			pcs_write_5        => open,                                       --     (terminated)
			pcs_waitrequest_5  => '0',                                        --     (terminated)
			mac_address_6      => open,                                       --     (terminated)
			mac_readdata_6     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_6         => open,                                       --     (terminated)
			mac_writedata_6    => open,                                       --     (terminated)
			mac_write_6        => open,                                       --     (terminated)
			mac_waitrequest_6  => '0',                                        --     (terminated)
			pcs_address_6      => open,                                       --     (terminated)
			pcs_readdata_6     => "0000000000000000",                         --     (terminated)
			pcs_read_6         => open,                                       --     (terminated)
			pcs_writedata_6    => open,                                       --     (terminated)
			pcs_write_6        => open,                                       --     (terminated)
			pcs_waitrequest_6  => '0',                                        --     (terminated)
			mac_address_7      => open,                                       --     (terminated)
			mac_readdata_7     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_7         => open,                                       --     (terminated)
			mac_writedata_7    => open,                                       --     (terminated)
			mac_write_7        => open,                                       --     (terminated)
			mac_waitrequest_7  => '0',                                        --     (terminated)
			pcs_address_7      => open,                                       --     (terminated)
			pcs_readdata_7     => "0000000000000000",                         --     (terminated)
			pcs_read_7         => open,                                       --     (terminated)
			pcs_writedata_7    => open,                                       --     (terminated)
			pcs_write_7        => open,                                       --     (terminated)
			pcs_waitrequest_7  => '0',                                        --     (terminated)
			mac_address_8      => open,                                       --     (terminated)
			mac_readdata_8     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_8         => open,                                       --     (terminated)
			mac_writedata_8    => open,                                       --     (terminated)
			mac_write_8        => open,                                       --     (terminated)
			mac_waitrequest_8  => '0',                                        --     (terminated)
			pcs_address_8      => open,                                       --     (terminated)
			pcs_readdata_8     => "0000000000000000",                         --     (terminated)
			pcs_read_8         => open,                                       --     (terminated)
			pcs_writedata_8    => open,                                       --     (terminated)
			pcs_write_8        => open,                                       --     (terminated)
			pcs_waitrequest_8  => '0',                                        --     (terminated)
			mac_address_9      => open,                                       --     (terminated)
			mac_readdata_9     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_9         => open,                                       --     (terminated)
			mac_writedata_9    => open,                                       --     (terminated)
			mac_write_9        => open,                                       --     (terminated)
			mac_waitrequest_9  => '0',                                        --     (terminated)
			pcs_address_9      => open,                                       --     (terminated)
			pcs_readdata_9     => "0000000000000000",                         --     (terminated)
			pcs_read_9         => open,                                       --     (terminated)
			pcs_writedata_9    => open,                                       --     (terminated)
			pcs_write_9        => open,                                       --     (terminated)
			pcs_waitrequest_9  => '0',                                        --     (terminated)
			mac_address_10     => open,                                       --     (terminated)
			mac_readdata_10    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_10        => open,                                       --     (terminated)
			mac_writedata_10   => open,                                       --     (terminated)
			mac_write_10       => open,                                       --     (terminated)
			mac_waitrequest_10 => '0',                                        --     (terminated)
			pcs_address_10     => open,                                       --     (terminated)
			pcs_readdata_10    => "0000000000000000",                         --     (terminated)
			pcs_read_10        => open,                                       --     (terminated)
			pcs_writedata_10   => open,                                       --     (terminated)
			pcs_write_10       => open,                                       --     (terminated)
			pcs_waitrequest_10 => '0',                                        --     (terminated)
			mac_address_11     => open,                                       --     (terminated)
			mac_readdata_11    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_11        => open,                                       --     (terminated)
			mac_writedata_11   => open,                                       --     (terminated)
			mac_write_11       => open,                                       --     (terminated)
			mac_waitrequest_11 => '0',                                        --     (terminated)
			pcs_address_11     => open,                                       --     (terminated)
			pcs_readdata_11    => "0000000000000000",                         --     (terminated)
			pcs_read_11        => open,                                       --     (terminated)
			pcs_writedata_11   => open,                                       --     (terminated)
			pcs_write_11       => open,                                       --     (terminated)
			pcs_waitrequest_11 => '0',                                        --     (terminated)
			mac_address_12     => open,                                       --     (terminated)
			mac_readdata_12    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_12        => open,                                       --     (terminated)
			mac_writedata_12   => open,                                       --     (terminated)
			mac_write_12       => open,                                       --     (terminated)
			mac_waitrequest_12 => '0',                                        --     (terminated)
			pcs_address_12     => open,                                       --     (terminated)
			pcs_readdata_12    => "0000000000000000",                         --     (terminated)
			pcs_read_12        => open,                                       --     (terminated)
			pcs_writedata_12   => open,                                       --     (terminated)
			pcs_write_12       => open,                                       --     (terminated)
			pcs_waitrequest_12 => '0',                                        --     (terminated)
			mac_address_13     => open,                                       --     (terminated)
			mac_readdata_13    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_13        => open,                                       --     (terminated)
			mac_writedata_13   => open,                                       --     (terminated)
			mac_write_13       => open,                                       --     (terminated)
			mac_waitrequest_13 => '0',                                        --     (terminated)
			pcs_address_13     => open,                                       --     (terminated)
			pcs_readdata_13    => "0000000000000000",                         --     (terminated)
			pcs_read_13        => open,                                       --     (terminated)
			pcs_writedata_13   => open,                                       --     (terminated)
			pcs_write_13       => open,                                       --     (terminated)
			pcs_waitrequest_13 => '0',                                        --     (terminated)
			mac_address_14     => open,                                       --     (terminated)
			mac_readdata_14    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_14        => open,                                       --     (terminated)
			mac_writedata_14   => open,                                       --     (terminated)
			mac_write_14       => open,                                       --     (terminated)
			mac_waitrequest_14 => '0',                                        --     (terminated)
			pcs_address_14     => open,                                       --     (terminated)
			pcs_readdata_14    => "0000000000000000",                         --     (terminated)
			pcs_read_14        => open,                                       --     (terminated)
			pcs_writedata_14   => open,                                       --     (terminated)
			pcs_write_14       => open,                                       --     (terminated)
			pcs_waitrequest_14 => '0',                                        --     (terminated)
			mac_address_15     => open,                                       --     (terminated)
			mac_readdata_15    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_15        => open,                                       --     (terminated)
			mac_writedata_15   => open,                                       --     (terminated)
			mac_write_15       => open,                                       --     (terminated)
			mac_waitrequest_15 => '0',                                        --     (terminated)
			pcs_address_15     => open,                                       --     (terminated)
			pcs_readdata_15    => "0000000000000000",                         --     (terminated)
			pcs_read_15        => open,                                       --     (terminated)
			pcs_writedata_15   => open,                                       --     (terminated)
			pcs_write_15       => open,                                       --     (terminated)
			pcs_waitrequest_15 => '0',                                        --     (terminated)
			mac_address_16     => open,                                       --     (terminated)
			mac_readdata_16    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_16        => open,                                       --     (terminated)
			mac_writedata_16   => open,                                       --     (terminated)
			mac_write_16       => open,                                       --     (terminated)
			mac_waitrequest_16 => '0',                                        --     (terminated)
			pcs_address_16     => open,                                       --     (terminated)
			pcs_readdata_16    => "0000000000000000",                         --     (terminated)
			pcs_read_16        => open,                                       --     (terminated)
			pcs_writedata_16   => open,                                       --     (terminated)
			pcs_write_16       => open,                                       --     (terminated)
			pcs_waitrequest_16 => '0',                                        --     (terminated)
			mac_address_17     => open,                                       --     (terminated)
			mac_readdata_17    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_17        => open,                                       --     (terminated)
			mac_writedata_17   => open,                                       --     (terminated)
			mac_write_17       => open,                                       --     (terminated)
			mac_waitrequest_17 => '0',                                        --     (terminated)
			pcs_address_17     => open,                                       --     (terminated)
			pcs_readdata_17    => "0000000000000000",                         --     (terminated)
			pcs_read_17        => open,                                       --     (terminated)
			pcs_writedata_17   => open,                                       --     (terminated)
			pcs_write_17       => open,                                       --     (terminated)
			pcs_waitrequest_17 => '0',                                        --     (terminated)
			mac_address_18     => open,                                       --     (terminated)
			mac_readdata_18    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_18        => open,                                       --     (terminated)
			mac_writedata_18   => open,                                       --     (terminated)
			mac_write_18       => open,                                       --     (terminated)
			mac_waitrequest_18 => '0',                                        --     (terminated)
			pcs_address_18     => open,                                       --     (terminated)
			pcs_readdata_18    => "0000000000000000",                         --     (terminated)
			pcs_read_18        => open,                                       --     (terminated)
			pcs_writedata_18   => open,                                       --     (terminated)
			pcs_write_18       => open,                                       --     (terminated)
			pcs_waitrequest_18 => '0',                                        --     (terminated)
			mac_address_19     => open,                                       --     (terminated)
			mac_readdata_19    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_19        => open,                                       --     (terminated)
			mac_writedata_19   => open,                                       --     (terminated)
			mac_write_19       => open,                                       --     (terminated)
			mac_waitrequest_19 => '0',                                        --     (terminated)
			pcs_address_19     => open,                                       --     (terminated)
			pcs_readdata_19    => "0000000000000000",                         --     (terminated)
			pcs_read_19        => open,                                       --     (terminated)
			pcs_writedata_19   => open,                                       --     (terminated)
			pcs_write_19       => open,                                       --     (terminated)
			pcs_waitrequest_19 => '0',                                        --     (terminated)
			mac_address_20     => open,                                       --     (terminated)
			mac_readdata_20    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_20        => open,                                       --     (terminated)
			mac_writedata_20   => open,                                       --     (terminated)
			mac_write_20       => open,                                       --     (terminated)
			mac_waitrequest_20 => '0',                                        --     (terminated)
			pcs_address_20     => open,                                       --     (terminated)
			pcs_readdata_20    => "0000000000000000",                         --     (terminated)
			pcs_read_20        => open,                                       --     (terminated)
			pcs_writedata_20   => open,                                       --     (terminated)
			pcs_write_20       => open,                                       --     (terminated)
			pcs_waitrequest_20 => '0',                                        --     (terminated)
			mac_address_21     => open,                                       --     (terminated)
			mac_readdata_21    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_21        => open,                                       --     (terminated)
			mac_writedata_21   => open,                                       --     (terminated)
			mac_write_21       => open,                                       --     (terminated)
			mac_waitrequest_21 => '0',                                        --     (terminated)
			pcs_address_21     => open,                                       --     (terminated)
			pcs_readdata_21    => "0000000000000000",                         --     (terminated)
			pcs_read_21        => open,                                       --     (terminated)
			pcs_writedata_21   => open,                                       --     (terminated)
			pcs_write_21       => open,                                       --     (terminated)
			pcs_waitrequest_21 => '0',                                        --     (terminated)
			mac_address_22     => open,                                       --     (terminated)
			mac_readdata_22    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_22        => open,                                       --     (terminated)
			mac_writedata_22   => open,                                       --     (terminated)
			mac_write_22       => open,                                       --     (terminated)
			mac_waitrequest_22 => '0',                                        --     (terminated)
			pcs_address_22     => open,                                       --     (terminated)
			pcs_readdata_22    => "0000000000000000",                         --     (terminated)
			pcs_read_22        => open,                                       --     (terminated)
			pcs_writedata_22   => open,                                       --     (terminated)
			pcs_write_22       => open,                                       --     (terminated)
			pcs_waitrequest_22 => '0',                                        --     (terminated)
			mac_address_23     => open,                                       --     (terminated)
			mac_readdata_23    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_23        => open,                                       --     (terminated)
			mac_writedata_23   => open,                                       --     (terminated)
			mac_write_23       => open,                                       --     (terminated)
			mac_waitrequest_23 => '0',                                        --     (terminated)
			pcs_address_23     => open,                                       --     (terminated)
			pcs_readdata_23    => "0000000000000000",                         --     (terminated)
			pcs_read_23        => open,                                       --     (terminated)
			pcs_writedata_23   => open,                                       --     (terminated)
			pcs_write_23       => open,                                       --     (terminated)
			pcs_waitrequest_23 => '0'                                         --     (terminated)
		);

	i_tse_pcs_0 : component altera_eth_tse_pcs_pma_phyip
		generic map (
			ENABLE_TIMESTAMPING => false,
			DEV_VERSION         => 4096,
			ENABLE_ECC          => false,
			DEVICE_FAMILY       => "ARRIAV",
			SYNCHRONIZER_DEPTH  => 3,
			ENABLE_CLK_SHARING  => false,
			ENABLE_SGMII        => false,
			PHY_IDENTIFIER      => 0
		)
		port map (
			clk                   => clk,                                                 -- control_port_clock_connection.clk
			reset                 => reset,                                               --              reset_connection.reset
			reg_addr              => avalon_arbiter_av_pcs_master_0_address,              --                  control_port.address
			reg_data_out          => avalon_arbiter_av_pcs_master_0_readdata,             --                              .readdata
			reg_rd                => avalon_arbiter_av_pcs_master_0_read,                 --                              .read
			reg_data_in           => avalon_arbiter_av_pcs_master_0_writedata,            --                              .writedata
			reg_wr                => avalon_arbiter_av_pcs_master_0_write,                --                              .write
			reg_busy              => avalon_arbiter_av_pcs_master_0_waitrequest,          --                              .waitrequest
			ref_clk               => ref_clk,                                             --  pcs_ref_clk_clock_connection.clk
			rx_pcs_clk            => i_custom_phyip_0_rx_clkout_export(0),                --                    rx_pcs_clk.export
			sd_loopback           => i_tse_pcs_0_sd_loopback_export,                      --                   sd_loopback.export
			rx_disp_err           => i_custom_phyip_0_rx_disperr_export(0),               --                   rx_disp_err.export
			tx_pcs_clk            => i_custom_phyip_0_tx_clkout_export(0),                --                    tx_pcs_clk.export
			rx_runningdisp        => i_custom_phyip_0_rx_runningdisp_export(0),           --                rx_runningdisp.export
			rx_frame              => i_custom_phyip_0_rx_parallel_data_export,            --                      rx_frame.export
			rx_runlengthviolation => i_custom_phyip_0_rx_rlv_export(0),                   --         rx_runlengthviolation.export
			rx_char_err_gx        => i_custom_phyip_0_rx_errdetect_export(0),             --                rx_char_err_gx.export
			tx_frame              => i_tse_pcs_0_tx_frame_export,                         --                      tx_frame.export
			rx_patterndetect      => i_custom_phyip_0_rx_patterndetect_export(0),         --              rx_patterndetect.export
			rx_kchar              => i_custom_phyip_0_rx_datak_export(0),                 --                      rx_kchar.export
			rx_syncstatus         => i_custom_phyip_0_rx_syncstatus_export(0),            --                 rx_syncstatus.export
			tx_kchar              => i_tse_pcs_0_tx_kchar_export,                         --                      tx_kchar.export
			rx_rmfifodatadeleted  => i_custom_phyip_0_rx_rmfifodatadeleted_export(0),     --          rx_rmfifodatadeleted.export
			rx_rmfifodatainserted => i_custom_phyip_0_rx_rmfifodatainserted_export(0),    --         rx_rmfifodatainserted.export
			tx_clkena             => i_tse_pcs_0_clock_enable_connection_tx_clkena,       --       clock_enable_connection.tx_clkena
			rx_clkena             => i_tse_pcs_0_clock_enable_connection_rx_clkena,       --                              .rx_clkena
			gmii_rx_dv            => i_tse_pcs_0_gmii_connection_gmii_rx_dv,              --               gmii_connection.gmii_rx_dv
			gmii_rx_d             => i_tse_pcs_0_gmii_connection_gmii_rx_d,               --                              .gmii_rx_d
			gmii_rx_err           => i_tse_pcs_0_gmii_connection_gmii_rx_err,             --                              .gmii_rx_err
			gmii_tx_en            => i_tse_mac_mac_gmii_connection_gmii_tx_en,            --                              .gmii_tx_en
			gmii_tx_d             => i_tse_mac_mac_gmii_connection_gmii_tx_d,             --                              .gmii_tx_d
			gmii_tx_err           => i_tse_mac_mac_gmii_connection_gmii_tx_err,           --                              .gmii_tx_err
			mii_rx_dv             => i_tse_pcs_0_mii_connection_mii_rx_dv,                --                mii_connection.mii_rx_dv
			mii_rx_d              => i_tse_pcs_0_mii_connection_mii_rx_d,                 --                              .mii_rx_d
			mii_rx_err            => i_tse_pcs_0_mii_connection_mii_rx_err,               --                              .mii_rx_err
			mii_tx_en             => i_tse_mac_mac_mii_connection_mii_tx_en,              --                              .mii_tx_en
			mii_tx_d              => i_tse_mac_mac_mii_connection_mii_tx_d,               --                              .mii_tx_d
			mii_tx_err            => i_tse_mac_mac_mii_connection_mii_tx_err,             --                              .mii_tx_err
			mii_col               => i_tse_pcs_0_mii_connection_mii_col,                  --                              .mii_col
			mii_crs               => i_tse_pcs_0_mii_connection_mii_crs,                  --                              .mii_crs
			set_10                => i_tse_pcs_0_sgmii_status_connection_set_10,          --       sgmii_status_connection.set_10
			set_1000              => i_tse_pcs_0_sgmii_status_connection_set_1000,        --                              .set_1000
			tx_clk                => i_tse_pcs_0_pcs_transmit_clock_connection_clk,       -- pcs_transmit_clock_connection.clk
			rx_clk                => i_tse_pcs_0_pcs_receive_clock_connection_clk,        --  pcs_receive_clock_connection.clk
			reset_tx_clk          => rst_controller_reset_out_reset,                      -- pcs_transmit_reset_connection.reset
			reset_rx_clk          => rst_controller_001_reset_out_reset,                  --  pcs_receive_reset_connection.reset
			led_crs               => led_crs,                                             --         status_led_connection.export
			led_link              => led_link,                                            --                              .export
			led_panel_link        => led_panel_link,                                      --                              .export
			led_col               => led_col,                                             --                              .export
			led_an                => led_an,                                              --                              .export
			led_char_err          => led_char_err,                                        --                              .export
			led_disp_err          => led_disp_err,                                        --                              .export
			wa_boundary           => i_custom_phyip_0_rx_bitslipboundaryselectout_export, --                   wa_boundary.export
			set_100               => open,                                                --                   (terminated)
			hd_ena                => open,                                                --                   (terminated)
			pcs_phase_measure_clk => '0',                                                 --                   (terminated)
			rx_latency_adj        => open,                                                --                   (terminated)
			tx_latency_adj        => open,                                                --                   (terminated)
			tx_ptp_alignment      => open,                                                --                   (terminated)
			pcs_eccstatus         => open                                                 --                   (terminated)
		);

	i_custom_phyip_0 : component altera_xcvr_custom
		generic map (
			device_family                         => "Arria V",
			protocol_hint                         => "gige",
			operation_mode                        => "Duplex",
			lanes                                 => 1,
			bonded_group_size                     => 1,
			bonded_mode                           => "xN",
			pma_bonding_mode                      => "x1",
			pcs_pma_width                         => 10,
			ser_base_factor                       => 8,
			ser_words                             => 1,
			data_rate                             => "1250 Mbps",
			base_data_rate                        => "1250 Mbps",
			en_synce_support                      => 0,
			tx_bitslip_enable                     => "false",
			rx_use_coreclk                        => "false",
			tx_use_coreclk                        => "false",
			use_8b10b                             => "true",
			use_8b10b_manual_control              => "false",
			std_tx_pcfifo_mode                    => "low_latency",
			std_rx_pcfifo_mode                    => "low_latency",
			word_aligner_mode                     => "sync_state_machine",
			word_aligner_state_machine_datacnt    => 3,
			word_aligner_state_machine_errcnt     => 4,
			word_aligner_state_machine_patterncnt => 4,
			word_aligner_pattern_length           => 7,
			word_align_pattern                    => "1111100",
			run_length_violation_checking         => 5,
			use_rate_match_fifo                   => 1,
			rate_match_pattern1                   => "10100010010101111100",
			rate_match_pattern2                   => "10101011011010000011",
			byte_order_mode                       => "none",
			byte_order_pattern                    => "111111011",
			byte_order_pad_pattern                => "000000000",
			coreclk_0ppm_enable                   => "false",
			pll_refclk_cnt                        => 1,
			pll_refclk_freq                       => "125.0 MHz",
			pll_refclk_select                     => "0",
			cdr_refclk_select                     => 0,
			plls                                  => 1,
			pll_type                              => "CMU",
			pll_select                            => 0,
			pll_reconfig                          => 0,
			pll_external_enable                   => 0,
			gxb_analog_power                      => "AUTO",
			pll_lock_speed                        => "AUTO",
			tx_analog_power                       => "AUTO",
			tx_slew_rate                          => "OFF",
			tx_termination                        => "OCT_100_OHMS",
			tx_use_external_termination           => "false",
			tx_preemp_pretap                      => 0,
			tx_preemp_pretap_inv                  => "false",
			tx_preemp_tap_1                       => 0,
			tx_preemp_tap_2                       => 0,
			tx_preemp_tap_2_inv                   => "false",
			tx_vod_selection                      => 2,
			tx_common_mode                        => "0.65V",
			rx_pll_lock_speed                     => "AUTO",
			rx_common_mode                        => "0.82V",
			rx_termination                        => "OCT_100_OHMS",
			rx_use_external_termination           => "false",
			rx_eq_dc_gain                         => 1,
			rx_eq_ctrl                            => 16,
			mgmt_clk_in_mhz                       => 250,
			embedded_reset                        => 1,
			channel_interface                     => 0
		)
		port map (
			phy_mgmt_clk                => clk,                                                    --                phy_mgmt_clk.clk
			phy_mgmt_clk_reset          => reset,                                                  --          phy_mgmt_clk_reset.reset
			phy_mgmt_address            => i_phyip_terminator_0_av_dummy_master_address,           --                    phy_mgmt.address
			phy_mgmt_read               => i_phyip_terminator_0_av_dummy_master_read,              --                            .read
			phy_mgmt_readdata           => i_phyip_terminator_0_av_dummy_master_readdata,          --                            .readdata
			phy_mgmt_waitrequest        => i_phyip_terminator_0_av_dummy_master_waitrequest,       --                            .waitrequest
			phy_mgmt_write              => i_phyip_terminator_0_av_dummy_master_write,             --                            .write
			phy_mgmt_writedata          => i_phyip_terminator_0_av_dummy_master_writedata,         --                            .writedata
			tx_ready                    => i_custom_phyip_0_tx_ready_export,                       --                    tx_ready.export
			rx_ready                    => i_custom_phyip_0_rx_ready_export,                       --                    rx_ready.export
			pll_ref_clk(0)              => ref_clk,                                                --                 pll_ref_clk.clk
			tx_serial_data              => i_custom_phyip_0_tx_serial_data_export,                 --              tx_serial_data.export
			pll_locked                  => i_custom_phyip_0_pll_locked_export,                     --                  pll_locked.export
			rx_serial_data(0)           => i_phyip_terminator_0_rx_serial_data_export,             --              rx_serial_data.export
			rx_runningdisp              => i_custom_phyip_0_rx_runningdisp_export,                 --              rx_runningdisp.export
			rx_disperr                  => i_custom_phyip_0_rx_disperr_export,                     --                  rx_disperr.export
			rx_errdetect                => i_custom_phyip_0_rx_errdetect_export,                   --                rx_errdetect.export
			rx_patterndetect            => i_custom_phyip_0_rx_patterndetect_export,               --            rx_patterndetect.export
			rx_syncstatus               => i_custom_phyip_0_rx_syncstatus_export,                  --               rx_syncstatus.export
			rx_bitslipboundaryselectout => i_custom_phyip_0_rx_bitslipboundaryselectout_export,    -- rx_bitslipboundaryselectout.export
			rx_rmfifodatainserted       => i_custom_phyip_0_rx_rmfifodatainserted_export,          --       rx_rmfifodatainserted.export
			rx_rmfifodatadeleted        => i_custom_phyip_0_rx_rmfifodatadeleted_export,           --        rx_rmfifodatadeleted.export
			rx_rlv                      => i_custom_phyip_0_rx_rlv_export,                         --                      rx_rlv.export
			rx_recovered_clk            => i_custom_phyip_0_rx_recovered_clk_export,               --            rx_recovered_clk.export
			tx_clkout                   => i_custom_phyip_0_tx_clkout_export,                      --                   tx_clkout.export
			rx_clkout                   => i_custom_phyip_0_rx_clkout_export,                      --                   rx_clkout.export
			tx_parallel_data            => i_tse_pcs_0_tx_frame_export,                            --            tx_parallel_data.export
			tx_datak(0)                 => i_tse_pcs_0_tx_kchar_export,                            --                    tx_datak.export
			rx_parallel_data            => i_custom_phyip_0_rx_parallel_data_export,               --            rx_parallel_data.export
			rx_datak                    => i_custom_phyip_0_rx_datak_export,                       --                    rx_datak.export
			reconfig_from_xcvr          => i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr, --          reconfig_from_xcvr.reconfig_from_xcvr
			reconfig_to_xcvr            => i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr, --            reconfig_to_xcvr.reconfig_to_xcvr
			tx_forceelecidle            => "0",                                                    --                 (terminated)
			tx_bitslipboundaryselect    => "00000",                                                --                 (terminated)
			rx_is_lockedtoref           => open,                                                   --                 (terminated)
			rx_is_lockedtodata          => open,                                                   --                 (terminated)
			rx_signaldetect             => open,                                                   --                 (terminated)
			rx_enabyteord               => "0",                                                    --                 (terminated)
			rx_bitslip                  => "0",                                                    --                 (terminated)
			rx_byteordflag              => open,                                                   --                 (terminated)
			tx_coreclkin                => "0",                                                    --                 (terminated)
			rx_coreclkin                => "0",                                                    --                 (terminated)
			cdr_ref_clk                 => "0",                                                    --                 (terminated)
			tx_dispval                  => "0",                                                    --                 (terminated)
			tx_forcedisp                => "0",                                                    --                 (terminated)
			pll_powerdown               => "0",                                                    --                 (terminated)
			tx_digitalreset             => "0",                                                    --                 (terminated)
			tx_analogreset              => "0",                                                    --                 (terminated)
			tx_cal_busy                 => open,                                                   --                 (terminated)
			rx_digitalreset             => "0",                                                    --                 (terminated)
			rx_analogreset              => "0",                                                    --                 (terminated)
			rx_cal_busy                 => open,                                                   --                 (terminated)
			ext_pll_clk                 => "0"                                                     --                 (terminated)
		);

	i_phyip_terminator_0 : component altera_eth_tse_phyip_terminator
		generic map (
			RECONFIG_TO_WIDTH   => 140,
			RECONFIG_FROM_WIDTH => 92,
			ENABLE_TIMESTAMPING => false
		)
		port map (
			clk                        => clk,                                                    --                       clk.clk
			reset                      => reset,                                                  --                     reset.reset
			address                    => i_phyip_terminator_0_av_dummy_master_address,           --           av_dummy_master.address
			readdata                   => i_phyip_terminator_0_av_dummy_master_readdata,          --                          .readdata
			read                       => i_phyip_terminator_0_av_dummy_master_read,              --                          .read
			writedata                  => i_phyip_terminator_0_av_dummy_master_writedata,         --                          .writedata
			write                      => i_phyip_terminator_0_av_dummy_master_write,             --                          .write
			waitrequest                => i_phyip_terminator_0_av_dummy_master_waitrequest,       --                          .waitrequest
			rxp                        => rxp,                                                    --         serial_connection.export
			txp                        => txp,                                                    --                          .export
			rx_recovclkout             => rx_recovclkout,                                         -- serdes_control_connection.export
			reconfig_togxb             => reconfig_togxb,                                         --                          .export
			reconfig_fromgxb           => reconfig_fromgxb,                                       --                          .export
			tx_ready                   => i_custom_phyip_0_tx_ready_export,                       --                  tx_ready.export
			tx_serial_data             => i_custom_phyip_0_tx_serial_data_export(0),              --            tx_serial_data.export
			sd_loopback                => i_tse_pcs_0_sd_loopback_export,                         --               sd_loopback.export
			rx_recovered_clk           => i_custom_phyip_0_rx_recovered_clk_export(0),            --          rx_recovered_clk.export
			pll_locked                 => i_custom_phyip_0_pll_locked_export(0),                  --                pll_locked.export
			rx_ready                   => i_custom_phyip_0_rx_ready_export,                       --                  rx_ready.export
			rx_serial_data             => i_phyip_terminator_0_rx_serial_data_export,             --            rx_serial_data.export
			reconfig_to_xcvr           => i_phyip_terminator_0_reconfig_to_xcvr_reconfig_to_xcvr, --          reconfig_to_xcvr.reconfig_to_xcvr
			reconfig_from_xcvr         => i_custom_phyip_0_reconfig_from_xcvr_reconfig_from_xcvr, --        reconfig_from_xcvr.reconfig_from_xcvr
			cdr_ref_clk_out            => open,                                                   --               (terminated)
			cdr_ref_clk_in             => '0',                                                    --               (terminated)
			terminate_rx_recovered_clk => '0'                                                     --               (terminated)
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset,                                         -- reset_in0.reset
			clk            => i_tse_pcs_0_pcs_transmit_clock_connection_clk, --       clk.clk
			reset_out      => rst_controller_reset_out_reset,                -- reset_out.reset
			reset_req      => open,                                          -- (terminated)
			reset_req_in0  => '0',                                           -- (terminated)
			reset_in1      => '0',                                           -- (terminated)
			reset_req_in1  => '0',                                           -- (terminated)
			reset_in2      => '0',                                           -- (terminated)
			reset_req_in2  => '0',                                           -- (terminated)
			reset_in3      => '0',                                           -- (terminated)
			reset_req_in3  => '0',                                           -- (terminated)
			reset_in4      => '0',                                           -- (terminated)
			reset_req_in4  => '0',                                           -- (terminated)
			reset_in5      => '0',                                           -- (terminated)
			reset_req_in5  => '0',                                           -- (terminated)
			reset_in6      => '0',                                           -- (terminated)
			reset_req_in6  => '0',                                           -- (terminated)
			reset_in7      => '0',                                           -- (terminated)
			reset_req_in7  => '0',                                           -- (terminated)
			reset_in8      => '0',                                           -- (terminated)
			reset_req_in8  => '0',                                           -- (terminated)
			reset_in9      => '0',                                           -- (terminated)
			reset_req_in9  => '0',                                           -- (terminated)
			reset_in10     => '0',                                           -- (terminated)
			reset_req_in10 => '0',                                           -- (terminated)
			reset_in11     => '0',                                           -- (terminated)
			reset_req_in11 => '0',                                           -- (terminated)
			reset_in12     => '0',                                           -- (terminated)
			reset_req_in12 => '0',                                           -- (terminated)
			reset_in13     => '0',                                           -- (terminated)
			reset_req_in13 => '0',                                           -- (terminated)
			reset_in14     => '0',                                           -- (terminated)
			reset_req_in14 => '0',                                           -- (terminated)
			reset_in15     => '0',                                           -- (terminated)
			reset_req_in15 => '0'                                            -- (terminated)
		);

	rst_controller_001 : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset,                                        -- reset_in0.reset
			clk            => i_tse_pcs_0_pcs_receive_clock_connection_clk, --       clk.clk
			reset_out      => rst_controller_001_reset_out_reset,           -- reset_out.reset
			reset_req      => open,                                         -- (terminated)
			reset_req_in0  => '0',                                          -- (terminated)
			reset_in1      => '0',                                          -- (terminated)
			reset_req_in1  => '0',                                          -- (terminated)
			reset_in2      => '0',                                          -- (terminated)
			reset_req_in2  => '0',                                          -- (terminated)
			reset_in3      => '0',                                          -- (terminated)
			reset_req_in3  => '0',                                          -- (terminated)
			reset_in4      => '0',                                          -- (terminated)
			reset_req_in4  => '0',                                          -- (terminated)
			reset_in5      => '0',                                          -- (terminated)
			reset_req_in5  => '0',                                          -- (terminated)
			reset_in6      => '0',                                          -- (terminated)
			reset_req_in6  => '0',                                          -- (terminated)
			reset_in7      => '0',                                          -- (terminated)
			reset_req_in7  => '0',                                          -- (terminated)
			reset_in8      => '0',                                          -- (terminated)
			reset_req_in8  => '0',                                          -- (terminated)
			reset_in9      => '0',                                          -- (terminated)
			reset_req_in9  => '0',                                          -- (terminated)
			reset_in10     => '0',                                          -- (terminated)
			reset_req_in10 => '0',                                          -- (terminated)
			reset_in11     => '0',                                          -- (terminated)
			reset_req_in11 => '0',                                          -- (terminated)
			reset_in12     => '0',                                          -- (terminated)
			reset_req_in12 => '0',                                          -- (terminated)
			reset_in13     => '0',                                          -- (terminated)
			reset_req_in13 => '0',                                          -- (terminated)
			reset_in14     => '0',                                          -- (terminated)
			reset_req_in14 => '0',                                          -- (terminated)
			reset_in15     => '0',                                          -- (terminated)
			reset_req_in15 => '0'                                           -- (terminated)
		);

end architecture rtl; -- of WIB_TSE
